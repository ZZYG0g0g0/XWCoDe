/**  * AccessDAO is for all queries related to authorization.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password  * for them.  *  * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}  *  * @author Andy Meneely  */
/**  * Used for Add Patient page (addPatient.jsp). This just adds an empty patient, creates a random password for  * that patient.  *  * Very similar to {@link AddOfficeVisitAction}  *  * @author Andy Meneely  */
/**  * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email  *  * @author Andy  */
/**  * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email  *  * @author Andy  */
/**  * Handles adding remote monitoring patient data to the database  */
/**  * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password  * for them.  *  * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}  *  * @author Andy Meneely  */
/**  * Used for the logging mechanism.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * AuthDAO is for anything that has to do with authentication. Most methods access the users table.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Used to change the session timeout, sessionTimeout.jsp. Note that a change to this timeout only gets  * reflected on new sessions.  *  * @author Andy Meneely  */
/**  * Used for chronicDiseaseRisks.jsp. Passes most of the logic off to {@link ChronicDiseaseMediator}, and the  * various subclasses of {@link RiskChecker}.  *  * @author Andy Meneely  */
/**  * Used for managing CPT codes.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * The CPT code set accurately describes medical, surgical, and diagnostic services  * and is designed to communicate uniform information about medical services and procedures  * among physicians, coders, patients, accreditation organizations, and payers for administrative,  * financial, and analytical purposes.  *  * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml  * @author Andy  */
/**  * Used by the patient to declare HCPs as "designated", in editHCPs.jsp.  *  * @author Andy Meneely  */
/**  * Validates an ICD9CM code  *  * @author Andy  */
/**  * Used by EditDrugInteraction.jsp to edit and get information about drug interactions.  */
/**  * Used for managing drug interactions.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm  * @author Andy  */
/**  * Edits the health history of a patient, used by editBasicHealth.jsp  *  * @author laurenhayward  */
/**  * Handles changes (adds and removes) to the monitoring list for a certain HCP.  */
/**  * Edits the office visits of a patient Used by editOfficeVisit.jsp.  This  * exists in two states: saved and unsaved.  If unsaved, data cannot be saved  * to sub actions (if this is attempted, exceptions will be raised).  Once it  * is saved, however, the sub actions can be saved.  *  * @author laurenhayward  * @author student  */
/**  * Edits a patient Used by editPatient.jsp  *  * @author laurenhayward  */
/**  * Edits the designated personnel Used by admin/editPersonnel.jsp, staff/editMyDemographics.jsp,  * editPersonnel.jsp  *  * @author laurenhayward  */
/**  * Edits the patient health record for a given patient Used by editPHR.jsp  *  * @author laurenhayward  */
/**  * Edits a patient's personal representatives. Used by hcp/editRepresentatives.jsp  *  * @author laurenhayward  */
/**  * Sends email to users. Since we don't want to train spammers in 326, this just inserts into a database. If  * we put this into an actual system, we would replace this class with stuff from javax.mail  *  * @author Andy  */
/**  * Creates a new Emergency Report Used by emergencyReport.jsp  *  * @author laurenhayward  */
/**  * Used for queries related to families.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Handles Getting the person's name associated with a certain mid Used by getUser.jsp  *  * @author laurenhayward  */
/**  * Gets the VisitReminders for a given patient Used by visitReminders.jsp  *  * @author laurenhayward  */
/**  * Used for all health records where a whole history is kept.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Checks to see if the given patient is at risk for Heart Disease  * For details on what each method does, see {@link RiskChecker}  * @author Andy  */
/**  * Validates the input for hospital beans, {@link UpdateHospitalListAction}  *  * @author Andy  */
/**  * Used for managing hospitals  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Used for managing all ICD codes.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * The International Statistical Classification of Diseases and Related Health Problems  * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a  * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and  * external causes of injury or disease.  *  * @see http://www.cdc.gov/nchs/icd9.htm  * @author Andy  */
/**  * A DAO for managing lab procedure codes. Database Access Object. All info coming into a DAO is already validated.  * Just worry about DB stuff here. Note that all DAOs need to have a DAOFactory with which to access other  * DAOs and to get connections. Also, every DAO must have a constructor with a DAOFactory as a parameter.  */
/**  * Action class for LabProcHCP.jsp.  *  * @extends LabProcUAPAction  */
/**  * Class for LabProcUAP.jsp.  Handles lab procedures for UAPs  */
/**  * Validator used to validate LOINCbean  */
/**  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal  *  standard for identifying medical laboratory observations.  *  * @see http://loinc.org/  * @author Ben Smith  */
/**  * Validates ND code beans, from {@link UpdateNDCodeListAction}  *  * @author Andy  */
/**  * Used for the logging mechanism.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */

/**  * Edits the privacy levels of diagnoses, used by myDiagnoses.jsp  *  * @author laurenhayward  */  /**  * Checks to see what HCP has had the most experience with a diagnosis  */
/**  * Used for managing the ND Codes.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * The National Drug Code (NDC) is a universal product identifier used in the  * United States for drugs intended for human use.  *  * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm  * @author Andy  */
/**  * Used for doing tasks related to office visits. Use this for linking diagnoses to office visits, and similar  * tasks.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Used for managing all static information related to a patient. For other information related to all aspects  * of patient care, see the other DAOs.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Validates a patient bean, from {@link EditPatientAction}  *  * @author Andy  */
/**  * Used for managing information related to personnel: HCPs, UAPs, Admins  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Validates a personnel bean, from {@link EditPersonnelAction}  *  * @author Andy  */
/**  * Validates an ND code, from {@link UpdateNDCodeListAction}  *  * @author Andy  */
/**  * Used to update referrals, and fetch lists of referrals sent to and  * from HCPs.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  */  /**  * An abstract class that encapsulates a sorted query of referrals.  * Derived classes provide the user id which all retrieved referrals will  * contain.  */  /**  * Concrete ReferralListQuery for accessing an HCPs sent referrals.  */  /**  * Concrete ReferralListQuery for accessing an HCPs received referrals.  */  /**  * Concrete ReferralListQuery for accessing a patients referrals.  */
/**  * Used for the keeping track of remote monitoring data.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  */
/**  * Validator used to validate adding new remote monitoring data in {@link AddRemoteMonitoringDataAction}  */

/**  * Used for handling data related to report requests.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  */
/**  * Manages resetting the password Used by resetPassword.jsp  *  * @author laurenhayward  */
/**  * An abstract class which has a number of utlity methods for checking risks.  *  * When extending this class, use the methods to fill in all of the necessary information. Then use isAtRisk  * and getPatientRiskFactors to get the actual risks. See the known subclasses for an example  *  * @author Andy  */

/**  * Validates the security question and answer. This doesn't follow the same format as the others because this  * validator is used for the various states of reset password, {@link SetSecurityQuestionAction}  *  * @author Andy  */

/**  * A listener which will time the user out after a pre-specified time limit.  */
/**  * Handles setting and retrieving the security questions/answers for users Used by  * patient/editMyDemographics.jsp, staff/editMyDemographics.jsp, staff/editPersonnell.jsp  *  * @author laurenhayward  */
/**  * This class is used to add patient survey data to the database.  The office visit ID is linked with the survey ID.  Once the  * survey is added, the transaction is logged  */
/**  * A DAO for handling all Survey data.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  */
/**  * A DAO for handling all Survey results.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  */
/**  * Used for the logging mechanism.  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */
/**  * Checks to see if the given patient is at risk for Type 1 Diabetes.  * For details on what each method does, see {@link RiskChecker}  *  * @author Andy  */
/**  * Checks to see if the given patient is at risk for Type II Diabetes.  * For details on what each method does, see {@link RiskChecker}  *  * @author Andy  */
/**  * Updates the CPT Code (Medical Procedures) List Used by editCPTProcedureCodes.jsp  *  * The CPT code set accurately describes medical, surgical, and diagnostic services  * and is designed to communicate uniform information about medical services and procedures  * among physicians, coders, patients, accreditation organizations, and payers for administrative,  * financial, and analytical purposes.  *  * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml  * @author laurenhayward  */
/**  * Handles updating the list of hospitals Used by hospitalListing.jsp  *  * @author laurenhayward  */
/**  * Handles updating the ICD Code (Diagnosis) List Used by editICDCodes.jsp  *  * The International Statistical Classification of Diseases and Related Health Problems  * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a  * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and  * external causes of injury or disease.  *  * @see http://www.cdc.gov/nchs/icd9.htm  * @author laurenhayward  */
/**  * Handles updating the LOINC Used.  *  * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal  *  standard for identifying medical laboratory observations.  *  * @see http://loinc.org/  */
/**  * Handles updating the ND Code (Prescription) List Used by editNDCodes.jsp  *  * The National Drug Code (NDC) is a universal product identifier used in the  * United States for drugs intended for human use.  *  * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm  * @author laurenhayward  */
/**  * Handles retrieving beans for viewPrescriptionRecords.jsp  *  * @author laurenhayward  */
/**  * Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp  *  * @author laurenhayward  */
/**  * Action class for ViewMyMessages.jsp  */
/**  * Handles patients viewing their own records Used by viewMyRecords.jsp  *  * @author laurenhayward  */
/**  * Handles retrieving the patient data for a certain HCP as used by viewTelemedicineData.jsp  */
/**  * Action class for ViewMyReports.jsp.  Allows the user to see all their reports  */
/**  * Action class for ViewPatientOfficeVisitHistory.jsp  */
/**  * Handles retrieving beans for viewPrescriptionRecords.jsp  *  * @author laurenhayward  */
/*  * This action returns a list of patients with a special-diagnosis-history who  * have the logged in HCP as a DHCP and whose medications are going to  * expire within seven days.   */
/**  * Action class for ViewReport.jsp  */
/**  * This class is used to handle retrieving survey results from the database.  It also logs the transaction.  */
/**  * Action class for ViewVisitedHCPs.jsp  */
/**  * Used for queries related to patient reminders  *  * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,  * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are  * added. DAOs can assume that all data has been validated and is correct.  *  * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be  * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC  * connections and/or accessing other DAOs.  *  * @author Andy  */