/**  * Returns the number of minutes it would take for a session to time out. This is done by effectively  * using the database table as a hash table. If a row in GlobalVariables does not exist, one is inserted  * with the default value '20'.  *  * @return An int for the number of minutes.  * @throws DBException  */  /**  * Sets the number of minutes it would take for a session to timeout.  *  * @param mins An int specifying the number of minutes  * @throws DBException  */
/**  * Adds the new user.   Event is logged.  *  * @param p bean containing the information for the new user  * @return MID of the new user.  * @throws FormValidationException  * @throws iTrustException  */
/**  * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.  *  * @return the new MID of the patient  * @throws DBException  * @throws FormValidationException  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Adds a patient's telemedicine data to the database.  *  * @param weight  * @param pedometerReading  * @throws DBException  */  /**  * returns the patient name  *  * @return patient name  * @throws DBException  * @throws iTrustException  */
/**  * Adds the new user.  Event is logged.  *  * @param p bean containing the information for the new user  * @return MID of the new user.  * @throws FormValidationException  * @throws iTrustException  */
/**  * Gets all the adverse event reports for a certain user MID.  * @param mid The MID of the user to be looked up.  * @return A java.util.List of AdverseEventBeans.  * @throws SQLException  * @throws DBException  */  /**  * Adds a message to the database.  * @param mBean A bean representing the message to be added.  * @throws SQLException  * @throws DBException  */
/**  * Returns a list of patient's allergies.  * @param pid A long for the MID of the patient we are looking up.  * @return A java.util.List of AllergyBeans associated with this patient.  * @throws DBException  */  /**  * Adds an allergy to this patient's list.  * @param pid The MID of the patient whose allergy we are adding.  * @param description The name of the allergen.  * @throws DBException  */
/**  * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).  * Initially sets security question to a random set of characters, so that nobody should be able to guess  * its value.  *  * @param mid The user's MID as a Long.  * @param role The role of the user as a Role enum {@link Role}  * @param password The password for the new user.  * @return A string representing the newly added randomly-generated password.  * @throws DBException  */  /**  * Reset the security question and answer for a particular user  *  * @param question The security question as a string.  * @param answer The security answer as a string.  * @param mid The MID of the user as a long.  * @throws DBException  */  /**  * Returns the user name of a user from just the MID  *  * @param mid The MID of the user to get the name of.  * @return The user's name as a String.  * @throws DBException  * @throws iTrustException  */  /**  * Returns the role of a particular MID  *  * @param mid The MID of the user to look up.  * @return The {@link Role} of the user as an enum.  * @throws DBException  * @throws iTrustException  */  /**  * Change the password of a particular user  *  * @param mid The MID of the user whose password we are changing.  * @param password The new password.  * @throws DBException  */  /**  * Return the security question for a particular user.  *  * @param mid The MID of the user we are looking up.  * @return The security question of the user we are looking up.  * @throws iTrustException  */  /**  * Return the security answer of a particular user  *  * @param mid The MID of the user we are looking up.  * @return The security answer as a String.  * @throws iTrustException  */  /**  * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where  * the key is the user's IP address. If the user's IP address is not in the table, a row with "1" is  * added.  *  * @param ipAddr The IP address of the user as a String.  * @throws DBException  */  /**  * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash  * table where the key is the user's IP address. If the user's IP address is not in the table, a row with  * "1" is added.  *  * @param ipAddr The IP address of the user as a String.  * @throws DBException  */  /**  * Return the number of failures from resetting a password, given an IP address.  *  * @param ipAddr An IP address for the associated attempt as a String.  * @return An int representing the number of failures.  * @throws DBException  */  /**  * Return the number of failures from login failures a password, given an IP address.  *  * @param ipAddr The IP address for this attempt as a String.  * @return An int representing the number of failures which have occured.  * @throws DBException  */       /**  * Check that a user actually exists.  *  * @param mid  * @return  * @throws DBException  */
/**  * Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO,  * {@link AccessDAO}  *  * @param minuteString  *            Pass the number of minutes in the form of a string, greater than 0.  * @throws FormValidationException  * @throws DBException  * @author Andy Meneely  */  /**  * Returns the current session timeout in minutes, as reflected in the database  *  * @return the number of minutes it would take for an inactive session to timeout  * @throws DBException  * @author Andy Meneely  */
/**  * Returns the ID of the patient to be checked.  *  * @return patient ID whose risk we are checking  * @author Andy Meneely  */  /**  * Gives the full name of the patient  *  * @return Full name of the patient who we are checking  * @throws DBException  * @throws iTrustException  * @author Andy Meneely  */  /**  * Returns the risks for which this patient is at risk for. All logic has been passed to  * {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}.  *  * @return List of risks  * @throws iTrustException  * @throws DBException  * @author Andy Meneely  */
/**  * Returns a list of all CPT codes.  *  * @return A java.util.List of ProcedureBeans for the CPT codes.  * @throws DBException  */  /**  * Returns a list of all immunization CPT codes.  *  * @return A java.util.List of all Immunization-related CPT codes.  * @throws DBException  */  /**  * Returns a list of all non-immunization CPT codes.  *  * @return A java.util.List of all Immunization-related CPT codes.  * @throws DBException  */  /**  * Returns a particular procedure description for a code.  *  * @param code The string representation of the code.  * @return The textual description of the code.  * @throws DBException  */  /**  * Adds a new CPT code, returns that it was added successfully  *  * @param proc A ProcedureBean representing the new code information.  * @return A boolean for whether the operation was successful.  * @throws DBException  * @throws iTrustException  */  /**  * Change the procedure description for a particular CPT code  *  * @param proc A ProcedureBean representing the new code information.  * @return A boolean for whether the operation was successful.  * @throws DBException  */
/**  * Lists the declared HCPs for this current patient  *  * @return Returns a list of the declared HCPs  * @throws iTrustException  * @author Andy Meneely  */  /**  * Validate an HCP's MID and declare them, if possible  *  * @param hcpStr  *            The MID of an HCP to declare  * @return A status message,  * @throws iTrustException  * @author Andy Meneely  */  /**  * Validate an HCP's MID and undeclare them, if possible  *  * @param input  *            The MID of an HCP to undeclare  * @return  * @throws iTrustException  * @author Andy Meneely  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Method to delete an interaction  * @param firstDrug  * @param secondDrug  * @return  */  /**  * Method to return a list of drug interactions for a given drug  * @param drugCode - The ND Code of the drug  * @return  */
/**  * Returns a list of all drug interactions for the input drug name  *  * @return A java.util.List of DrugInteractionBeans.  * @throws DBException  */  /**  * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an  * iTrustException is thrown.  *  * @param firstDrug  The name of the first drug in an interaction.  * @param secondDrug  The name of the second drug in an interaction.  * @param description  Explanation of the drug interaction.  * @return A boolean indicating success or failure.  * @throws DBException  * @throws iTrustException  */  /**  * Remove an interaction from the database  *  * @param firstDrug  The name of the first patient  * @param secondDrug  The name of the second patient  * @return true if removed successfully, false if not in list  */
/**  * returns the patient name  *  * @return patient name  * @throws DBException  * @throws iTrustException  */  /**  * Adds a health record for the given patient  *  * @param pid  The patient record who is being edited.  * @param hr  The filled out health record form to be added.  * @return message - "Information Recorded" or exception's message  * @throws FormValidationException  */   /**  * Returns a list of all HealthRecords for the given patient  *  * @param pid  The ID of the patient to look up  * @return list of HealthRecords  * @throws iTrustException  */
/**  *  Adds a patient to the current HCP's remote monitoring list  *  *  @param patientMID the patient  *  @param permissions Array indicating what data the patient is allowed to enter.  * 	 			Ordered by Systolic Blood Pressure, Diastolic Blood Pressure, Glucose Level, Weight, Pedometer Reading.  *  @return true if added successfully. False if already in list.  *  @throws DBException  */  /**  * Removes a patient from the current HCP's remote monitoring list  *  * @param patientMID the patient  * @return true if removed successfully. False if not in list.  * @throws DBException  */  /**  * Returns whether a patient is in an HCP's list already  * @param patientMID the patient  * @return true if in DB, false otherwise  * @throws DBException  */  /**  * returns the patient name  *  * @return patient name  * @throws DBException  * @throws iTrustException  */
/**  * Used to update the sub actions once a office visit is saved.  Until this  * is called, attempting to save sub actions will raise an exception.  * @throws iTrustException  */  /**  * Returns the office visit bean for the office visit  *  * @return the OfficeVisitBean of the office visit  * @throws iTrustException  */  /**  * @return The EditPrescriptionsAction sub action associated with this office visit.  * @throws iTrustException  */  /**  * @return The EditProceduresAction sub action associated with this office visit.  * @throws iTrustException  */  /**  * @return The EditImmunizationsAction sub action associated with this office visit.  * @throws iTrustException  */  /**  * @return The EditDiagnosesAction sub action associated with this office visit.  * @throws iTrustException  */  /**  * @return The EditLabProceduresAction sub action associated with this office visit.  * @throws iTrustException  */    /**  * This is a list of all hospitals, ordered by the office visit's hcp FIRST  *  * @param hcpID  * @return  * @throws iTrustException  */  /**  * Combines two lists of hospitals  *  * @param hcpsHospitals hospitals the HCP is assigned to  * @param allHospitals all hospitals  * @return the combined list  */  /**  * Updates the office visit with information from the form passed in.  If  * the office visit has not yet been saved, calling this method will save  * it as well as make the sub actions able to be saved.  *  * @param form  *            information to update  * @return "success" or exception's message  * @throws FormValidationException  */  /**  * Helper that logs an office visit event.  The associated patient id, HCP  * id, and office visit id are automatically included.  * @param trans Transaction type for the log.  * @throws DBException  */  /**  * Sends e-mail regarding the prescribed dangerous drug.  *  * @param hcpID HCP the prescription is made by  * @param patID ID of the patient prescription is for  * @param problem The allergy and/or interaction that is the problem  * @return the sent e-mail  * @throws DBException  */  /**  * Updates the office visit.  *  * @param form form with all the information  * @throws DBException  * @throws FormValidationException  */  /**  * @return The OfficeVisitBean associated with this office visit, or if it  * has not been saved, a default OfficeVisitBean with the HCP id and  * patient id filled in.  * @throws DBException  */  /**  * Update the office visit with the given data.  If the office visit has  * not yet been saved, this will save it and reinitialize the sub actions.  * @param bean The data with which to update the office visit.  * @throws DBException  * @throws iTrustException  */
/**  * Takes the information out of the PatientBean param and updates the patient's information  *  * @param p  *            the new patient information  * @throws iTrustException  * @throws FormValidationException  */  /**  * Returns a PatientBean for the patient  *  * @return the PatientBean  * @throws DBException  */  /**  *  Creates and e-mail to inform the patient that their information has been updated.  *  * @return the email with the notice  * @throws DBException  */
/**  * Takes information from the personnelForm param and updates the patient  *  * @param personnelForm  *            PersonnelBean with new information  * @throws iTrustException  * @throws FormValidationException  */
/**  * Adds an allergy to the patient's records  *  * @param pid  * @param description  * @return "Allergy Added", exception message, a list of invalid fields, or "" (only if description is  *         null)  * @throws DBException  * @throws iTrustException  */  /**  * Returns a PatientBean for the patient  *  * @return PatientBean  * @throws iTrustException  */  /**  * Returns a list of AllergyBeans for the patient  *  * @return list of AllergyBeans  * @throws iTrustException  */  /**  * Returns a list of FamilyMemberBeans for the patient  *  * @return list of FamilyMemberBeans  * @throws iTrustException  */  /**  * Returns a list of HealthRecords for the patient  *  * @return  * @throws iTrustException  */  /**  * Returns a list of OfficeVisitBeans  *  * @return  * @throws iTrustException  */  /**  * Returns a complete OfficeVisitBean given a visitID  *  * @return  * @throws iTrustException  */   /**  * Returns a list of diseases for which the patient is at risk  *  * @return list of RiskCheckers  * @throws iTrustException  * @throws DBException  */  /**  * Checks to see if a particular family member has high blood pressure  *  * @param member the family member to check  * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure  * @throws iTrustException  */  /**  * Checks to see if a particular family member has high cholesterol  *  * @param member the family member to check  * @return true if the family member has high cholesterol.  False if there are no records or the family member does not  * @throws iTrustException  */    /**  * Checks to see if a particular family member has heart disease  *  * @param member the family member to check  * @return true if the family member has heart disease.  False if there are no records or the family member does not  * @throws iTrustException  */  /**  * Checks to see if a particular family member smokes  *  * @param member the family member to check  * @return true if the family member smokes.  False if there are no records or the family member does not  * @throws iTrustException  */  /**  * Checks to see if the family member is dead and returns their cause of death if so  *  * @param member the family member to check  * @return the cause of death if there is one; otherwise null  * @throws iTrustException  */  /**  * Creates a fake e-mail to notify the user that their records have been altered.  *  * @return the e-mail to be sent  * @throws DBException  */
/**  * Return a list of patients that pid represents  *  * @param pid The id of the personnel we are looking up representees for.  * @return a list of PatientBeans  * @throws iTrustException  */  /**  * Makes the patient (pid) represent the input mid parameter  *  * @param pidString  *            the mid of the person who will be represented (the representee)  * @return a message  * @throws iTrustException  */  /**  * Makes the patient (pid) no longer represent the input mid param  *  * @param input  *            the mid of the person be represented (representee)  * @return a message  * @throws iTrustException  */
// If you want to know how to send emails from Java, just Google it on your own time.
/**  * Returns the patient's name  *  * @return patient's full name  */  /**  * Returns the patient's age  *  * @return patient's age  */  /**  * Returns the patient's gender  *  * @return patient's gender  */  /**  * Returns the patient's emergency contact  *  * @return patient's emergency contact  */  /**  * Returns the patient's blood type  *  * @return the patient's blood type  */  /**  * Returns a list of allergies for the given patient  *  * @return a list of AllergyBeans  * @throws iTrustException  */  /**  * Returns a list of prescriptions the patient is currently taking  *  * @return a list of PrescriptionBeans for which the patient is currently taking  * @throws iTrustException  */  /**  * Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum  *  * @return list of DiagnosisBeans  * @throws iTrustException  */  /**  * Returns a list of prescriptions the patient is currently taking  *  * @return a list of PrescriptionBeans for which the patient is currently taking  * @throws iTrustException  */  /**  * Creates a fake e-mail to notify the user that an emergency report has been created and viewed.  *  * @return the e-mail to be sent  * @throws DBException  */
/**  * Return the information of the mother and father of this patient  *  * @param pid -  *            this patient  * @return  * @throws DBException  */  /**  * Return a list of patients who share at least one parent (and that parent is not '0') with this patient  *  * @param pid -  *            this patient  * @return A java.util.list of FamilyMemberBeans.  * @throws DBException  */  /**  * Return a list of patients whose mother or father is this patient  *  * @param pid -  *            this patient  * @return A java.util.List of FamilyMemberBeans.  * @throws DBException  */  /**  * Private helper method (since all three are alike)  *  * @param pid  * @param relation  * @param query  * @param secondParam -  *            add the pid as the second parameter (the 3rd query was a little different)  *  * @return A java.util.List of FamilyMemberBeans.  * @throws DBException  */
/**  * Returns the person's name that matches the inputMID param  *  * @param inputMID The MID to look up.  * @return the person's name  * @throws DBException  * @throws iTrustException  */
/**  * Returns a list of VisitReminderReturnForms for the type passed in as a param  *  * @param type  *            the ReminderType  * @return the list of VisitReminderReturnForms  * @throws iTrustException  * @throws FormValidationException  */   /**  * Checks a patient to see what immunizations they need  *  * @param pid patient to be checked  * @return patient list of those lacking immunizations according to the schedule  */  /**  * Checks to see if a patient needs the HPV immunization  *  * @param count			how many HPV immunizations she has already had  * @param patientAge	how old the patient is, in weeks  * @param time			date of the last procedure  * @return the			reason the immunization should be given, including required immunization age  */  /**  * Checks to see if a patient needs the Hepatits A immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */  /**  * Checks to see if a patient needs the Varicella immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */  /**  * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */  /**  * Checks to see if a patient needs the Polio immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */  /**  * Checks to see if a patient needs the Pneumococcal immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */  /**  * Checks to see if a patient needs the Haemophilus Infulenzae immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */  /**  * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */   /**  * Checks to see if a patient needs the Hepatitis B immunization  *  * @param count which immunization they are on  * @param patientAge how old the patient is  * @param time what the current date is  * @return when the immunization should be given  */
/**  * Returns a list of all health records for a particular patient  *  * @param mid The MID of the patient to look up.  * @return A java.util.List of HealthRecords.  * @throws DBException  */  /**  * Adds a health record for a particular patient  *  * @param record The HealthRecord object to insert.  * @return A boolean indicating whether the insert was successful.  * @throws DBException  */

/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Returns a list of all hospitals sorted alphabetically  *  * @return A java.util.List of HospitalBeans.  * @throws DBException  */  /**  * Returns a particular hospital given its ID  *  * @param id The String ID of the hospital.  * @return A HospitalBean representing this hospital.  * @throws DBException  */  /**  * Adds a hospital  *  * @param hosp The HospitalBean object to insert.  * @return A boolean indicating whether the insertion was successful.  * @throws DBException  * @throws iTrustException  */  /**  * Updates a particular hospital's description. Returns the number of rows affected (should be 1)  *  * @param hosp The HospitalBean to update.  * @return An int indicating the number of affected rows.  * @throws DBException  */  /**  * Assign an HCP to a hospital. If they have already been assigned to that hospital, then an  * iTrustException is thrown.  *  * @param hcpID The HCP's MID to assign to the hospital.  * @param hospitalID The ID of the hospital to assign them to.  * @return A boolean indicating whether the assignment was a success.  * @throws DBException  * @throws iTrustException  */  /**  * Unassigns an HCP to a hospital. Returns whether or not any changes were made  *  * @param hcpID The MID of the HCP to remove.  * @param hospitalID The ID of the hospital being removed from.  * @return A boolean indicating success.  * @throws DBException  */  /**  * Removes all hospital assignments for a particular HCP. Returns the number of rows affected.  *  * @param hcpID The MID of the HCP.  * @return An int representing the number of hospital assignments removed.  * @throws DBException  */  /**  * Checks to see if the LT has an assigned hospital  *  * @param hcpID The MID of the LT.  * @return true If the LT has an assigned hospital to them  * @return false If the LT does not have an assigned hospital to them  * @throws DBException  */
/**  * Returns all ICD9CM codes sorted by code  *  * @return java.util.List of DiagnosisBeans  * @throws DBException  */  /**  * Returns a particular description for a given code  *  * @param code The String representation of the code.  * @return A DiagnosisBean of the code.  * @throws DBException  */  /**  * Adds an ICD9CM code. Returns whether or not the change was made.  *  * @param diag The DiagnosisBean representing the changes.  * @return A boolean indicating success.  * @throws DBException  * @throws iTrustException  */  /**  * Changes a the description of a particular code.  *  * @param diag A DiagnosisBean representing the changes.  * @return A boolean indicating the number of updated rows.  * @throws DBException  */
/**  * Get a list of the lab procedures associated with a given patient.  * @param id The MID of the patient as a long.  * @return A java.util.List of LabProcedureBeans  * @throws DBException  */  /**  * Get lab procedures for a specific office visit, but excluding lab  * procedures which a patient does not have access to.  *  * @param ovid Office visit id.  * @return  * @throws DBException  */  /**  * Gets all the lab procedures for a given patient that occur within the next month.  * @param id The MID of the patient as a long.  * @return A java.util.List of LabProcedureBeans.  * @throws DBException  */  /**  * Gets an individual lab procedure.  * @param id The ID of the lab procedure.  * @return A LabProcedureBean representing the procedure.  * @throws DBException  */  /**  * Gets all procedures for Patient  * @param mid patient id  * @return A java.util.List of LabProcedureBeans.  * @throws DBException  */  /**  * This gets all the procedures for a particular patient on a particular office visit  * @param mid The MID of the patient.  * @param ovid The Office Visit ID.  * @return A java.util.List of LabProcedureBeans.  * @throws DBException  */  /**  * This gets all the procedures for a particular patient on a particular office visit  * @param ovid The Office Visit ID.  * @return A java.util.List of LabProcedureBeans  * @throws DBException  */  /**  * Gets all lab procedures, period.  * @return A java.util.List of LabProcedureBeans.  * @throws DBException  */  /**  * Get all lab procedures associated with a particular HCP.  * @param mid The HCP's id.  * @return  * @throws DBException  */  /**  * Get all lab procedures associated with a particular HCP and Patient.  * @param mid The HCP's id.  * @return  * @throws DBException  */  /**  * Get a count of all pending lab procedures for a particular HCP.  * @param mid  * @return  * @throws DBException  */  /**  * Gets the lab procedures for a given LHCP that occur within the next month.  * @param ovid The Office Visit ID conducted by the LHCP in question.  * @return A java.util.List of LabProcedureBeans.  * @throws DBException  */  /**  * Inserts a lab procedure into the database.  * @param b The LabProcedureBean to be inserted.  * @return A long containing the ID of the newly inserted lab procedure bean.  * @throws DBException  */  /**  * Updates an existing lab procedure.  * @param b The LabProcedureBean representing the procedure to be updated.  * @throws DBException  */  /**  * Marks a lab procedure as viewed by the patient  * @param b The LabProcedureBean representing the procedure to be marked as viewed.  * @throws DBException  */  /**  * Get the count of unviewed lab procedures for a particular patient.  * @param pid  * @return  * @throws DBException  */  /**  * Gets all the lab procedures that correspond to a particular LOINC.  * @param id The LOINC in question.  * @return A java.util.List of LabProcedureBeans.  * @throws DBException  */  /**  * Updates the rights of a user on a given lab procedure.  * @param b The LabProcedureBean in question.  * @throws DBException  */  /**  * Delete a given lab procedure form the database.  * @param procedureID  * @throws DBException  */  /**  * Get a list of the lab procedures in transit associated with a given Lab Tech.  * @param id The MID of the LT as a long.  * @return A java.util.List of LabProcedureBeans  * @throws DBException  */  /**  * Get a list of the lab procedures received for a given Lab Tech.  * @param id The MID of the LT as a long.  * @return A java.util.List of LabProcedureBeans  * @throws DBException  */  /**  * Get a list of the lab procedures testing for a given Lab Tech.  * @param id The MID of the LT as a long.  * @return A java.util.List of LabProcedureBeans  * @throws DBException  */  /**  * Get the count of the In_Transit and Received lab procedures assigned to  * a specific lab tech.  *  * @param mid  * @return  * @throws DBException  */  /**  * Get the count of the In_Transit and Received lab procedures assigned to  * a specific lab tech grouped by priority.  *  * @param mid  * @return  * @throws DBException  */  /**  * @param id  * @param parseLong  * @param parseLong2  * @param parseLong3  * @throws DBException  */  /**  * @param parseLong  * @throws DBException  */  /**  * @param parseLong  * @throws DBException  */
/**  * This method sorts by LOINC and returns the list  *  * @param id the ID to sort the list by  * @return List sorted by LOINC  */  /**  * Returns a list of all the lab procedures for the next month  *  * @return all the lab procedures for the next month  */  /**  * Changes the privacy settings  *  * @param x the ID of the procedure to change  */  /**  * Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit  *  * @param x the ID of the HCP to check  */
/**  * Updates a lab procedure  *  * @param b the procedure to update  * @throws DBException  * @throws FormValidationException  */  /**  * Sends an e-mail informing the patient that their procedure has been updated  *  * @param b the procedure that was updated  * @return an e-mail to the patient with the notice  * @throws DBException  */  /**  * Returns a list of all the lab procedures for a particular patient.  *  * @param id MID of the UAP viewing the procedures  * @return a list of all the lab procedures for that UAP  * @throws DBException  */  /**  * Returns a list of the lab procedures associated with both the HCP and  * the given patient.  *  * @param pid The id of the patient.  * @return A list of lab procedures.  * @throws DBException  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Adds a LOINC  *  * @param hosp The LOINCbean representing the new code to be added.  * @throws DBException  * @throws iTrustException  */  /**  * Returns all LOINCs associated with LaboratoryProcedureCode  *  * @param visitID The code of the Laboratory Procedure Code as a String.  * @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code.  * @throws DBException  */  /**  * Updates the information in LOINC.  *  * @param ov  * @throws DBException  */  /**  * Returns all LOINCs as a list.  *  * @return A java.util.List of LOINCbeans.  * @throws DBException  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Gets all the messages for a certain user MID sorted by ascending time.  * @param mid The MID of the user to be looked up.  * @return A java.util.List of MessageBeans.  * @throws SQLException  */  /**  * Gets all the messages for a certain user MID sorted by name ascending.  * @param mid The MID of the user to be looked up.  * @return A java.util.List of MessageBeans.  * @throws SQLException  */  /**  * Gets all the messages for a certain user MID sorted by name descending.  * @param mid The MID of the user to be looked up.  * @return A java.util.List of MessageBeans.  * @throws SQLException  */   /**  * Gets all the messages for a certain user MID sorted by ascending time.  * @param mid The MID of the user to be looked up.  * @return A java.util.List of MessageBeans.  * @throws SQLException  */  /**  * Gets all the messages for a certain user MID sorted by name ascending.  * @param mid The MID of the user to be looked up.  * @return A java.util.List of MessageBeans.  * @throws SQLException  */  /**  * Gets all the messages for a certain user MID sorted by name descending.  * @param mid The MID of the user to be looked up.  * @return A java.util.List of MessageBeans.  * @throws SQLException  */  /**  * Adds a message to the database.  * @param mBean A bean representing the message to be added.  * @throws SQLException  */
/**  * Returns a list of reports between specified dates  * @param isPrescription Boolean to return prescriptions or immunizations  * @param start The starting date  * @param end The ending date  * @return the list of events  * @throws iTrustException  * @throws FormValidationException  * @throws SQLException  * @throws ParseException  */  /**  * Returns the patient's name  * @param MID the MID of the patient to return the name for.  * @return  */  /**  * Sends an e-mail to a patient requesting more information  * @param patientMID The patient to receive the message  * @param message The message  * @return string for testing purposes  * @throws DBException  */  /**  * Method used to remove an adverse event report  *  * @param id the id of the report to be removed  * @throws DBException  * @throws iTrustException  */
/**  * Returns a list of DiagnosisBeans for the patient  *  * @return the list of DiagnosisBeans  * @throws DBException  */  /**  * Returns a list of all the HCPs who have a particular diagnosis  *  * @param icdcode the diagnosis of interest  * @return the list of HCPs  * @throws DBException  */  /**  * Looks up all the prescriptions given by a certain HCP with the same ICD code.  * @param hcpid The MID of the HCP  * @param icdcode The ICD code of the prescription we are looking up.  * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.  * @throws DBException  */  /**  * Compares one HCP with another  *  * @param a the first HCP  * @param b the second HCP  * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0  */
/**  * Returns a list of all ND codes  *  * @return A java.util.List of MedicationBeans.  * @throws DBException  */  /**  * Returns a particular description for a given code.  *  * @param code The ND code to be looked up.  * @return A bean representing the Medication that was looked up.  * @throws DBException  */  /**  * Adds a new ND code, returns whether or not the change was made. If the code already exists, an  * iTrustException is thrown.  *  * @param med The medication bean to be added.  * @return A boolean indicating success or failure.  * @throws DBException  * @throws iTrustException  */  /**  * Updates a particular code's description  *  * @param med A bean representing the particular medication to be updated.  * @return An int representing the number of updated rows.  * @throws DBException  */  /**  * Removes a ND code, returns whether or not the change was made.  *  * @param med The medication bean to be removed.  * @return A boolean indicating success or failure.  * @throws DBException  * @throws iTrustException  */
/**  * Adds an visit and return its ID  *  * @param ov The OfficeVisitBean to be added.  * @return A long indicating the unique ID for the office visit.  * @throws DBException  */   /**  * Updates the information in a particular office visit.  *  * @param ov The Office Visit bean representing the changes.  * @throws DBException  */  /**  * Returns a particular office visit given an ID  *  * @param visitID The unique ID of the office visit.  * @return An OfficeVisitBean with the specifics for that office visit.  * @throws DBException  */   /**  * Returns whether or not an office visit actually exists  *  * @param ovID The ID of the office visit to be checked.  * @param pid The MID of the patient associated with this transaction.  * @return A boolean indicating its existence.  * @throws DBException  */  /**  * Returns a list of all office visits for a given patient  *  * @param pid The MID of the patient in question.  * @return A java.util.List of OfficeVisitBeans.  * @throws DBException  */  /**  * Returns a list of all office visits for a given patient  *  * @param mid The MID of the LHCP you are looking up.  * @return A java.util.List of Office Visits.  * @throws DBException  */  /**  * Returns a list of all office visits for a given patient  *  * @param pid The MID of the patient.  * @return A java.util.List of Office Visits.  * @throws DBException  */  /**  * Returns a list of all office visits at a given hospital  * @param hospitalID the id of the hospital  * @return a list of the OfficeVisitBeans that hold the office visits  * @throws DBException in the event of a database error  */  /**  * Gets all office visits corresponding to a particular ICD diagnosis.  *  * @param icdcode A string represnting the ICD diagnosis to look up.  * @return A java.util.List of Office visits.  * @throws DBException  */
/**  * Returns the name for the given MID  *  * @param mid The MID of the patient in question.  * @return A String representing the patient's first name and last name.  * @throws iTrustException  * @throws DBException  */  /**  * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO  *  * @param mid The MID of the patient in question.  * @param role A String representing the role of the patient.  * @return A String representing the patient's role.  * @throws iTrustException  * @throws DBException  */  /**  * Adds an empty patient to the table, returns the new MID  *  * @return The MID of the patient as a long.  * @throws DBException  */  /**  * Returns the patient's information for a given ID  *  * @param mid The MID of the patient to retrieve.  * @return A PatientBean representing the patient.  * @throws DBException  */  /**  * Updates a patient's information for the given MID  *  * @param p The patient bean representing the new information for the patient.  * @throws DBException  */     /**  * Returns whether or not the patient exists  *  * @param pid The MID of the patient in question.  * @return A boolean indicating whether the patient exists.  * @throws DBException  */  /**  * Returns a list of HCPs who are declared by the given patient  *  * @param pid The MID of the patient in question.  * @return A java.util.List of Personnel Beans.  * @throws DBException  */  /**  * Declares an HCP for a particular patient  *  * @param pid The MID of the patient in question.  * @param hcpID The HCP's MID.  * @return A boolean as to whether the insertion was successful.  * @throws DBException  * @throws iTrustException  */  /**  * Undeclare an HCP for a given patient  *  * @param pid The MID of the patient in question.  * @param hcpID The MID of the HCP in question.  * @return A boolean indicating whether the action was successful.  * @throws DBException  */  /**  * Check if a patient has declared the given HCP  *  * @param pid The MID of the patient in question as a long.  * @param hcpid The MID of the HCP in question as a long.  * @return  * @throws DBException  */  /**  * Return a list of patients that the given patient represents  *  * @param pid The MID of the patient in question.  * @return A java.util.List of PatientBeans  * @throws DBException  */  /**  * Return a list of patients that the given patient is represented by  *  * @param pid The MID of the patient in question.  * @return A java.util.List of PatientBeans.  * @throws DBException  */  /**  * Check if the given representer represents the representee  *  * @param representer The MID of the representer in question.  * @param representee The MID of the representee in question.  * @return A boolean indicating whether represenation is in place.  * @throws DBException  */  /**  * Assign a representer to the representee  *  * @param representer The MID of the representer as a long.  * @param representee The MID of the representee as a long.  * @return A boolean as to whether the insertion was correct.  * @throws DBException  * @throws iTrustException  */  /**  * Unassign the representation  *  * @param representer The MID of the representer in question.  * @param representee The MID of the representee in question.  * @return A boolean indicating whether the unassignment was sucessful.  * @throws DBException  */  /**  * Return a list of all diagnoses for a given patient  *  * @param pid The MID of the patient in question.  * @return A java.util.List of Diagnoses.  * @throws DBException  */  /**  * Return a list of all procedures for a given patient  *  * @param pid The MID of the patient in question.  * @return A java.util.List of all the procedures.  * @throws DBException  */  /**  * Return a list of all immunization procedures for a given patient  *  * @param pid The MID of the patient in question.  * @return A java.util.List of the procedures.  * @throws DBException  */  /**  * Return a list of all prescriptions for a patient  *  * @param patientID The MID of the patient in question.  * @return A java.util.List of prescriptions.  * @throws DBException  */  /**  * Return a list of prescriptions which are currently prescribed for a patient  *  * @param patientID The MID of the patient in question.  * @return A java.util.List of prescription beans.  * @throws DBException  */   /**  * Lists every patient in the database.  *  * @return A java.util.List of PatientBeans representing the patients.  * @throws DBException  */  /**  * Return a list of patients with a special-diagnosis-history who  * have the logged in HCP as a DHCP and whose medications are going to  * expire within seven days.  *  * @param hcpMID The MID of the logged in HCP  * @return A list of patients satisfying the conditions.  * @throws DBException  */  /**  * Returns all patients with names "LIKE" (as in SQL) the passed in parameters.  *  * @param first The patient's first name.  * @param last The patient's last name.  * @return A java.util.List of PatientBeans.  * @throws DBException  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Returns the name for a given MID  *  * @param mid The MID of the personnel in question.  * @return A String representing the name of the personnel.  * @throws iTrustException  * @throws DBException  */   /**  * Adds an empty personnel, and returns the MID.  *  * @return A long indicating the new MID.  * @param role A {@link Role} enum indicating the personnel's specific role.  * @throws DBException  * @throws iTrustException  */  /**  * Retrieves a PersonnelBean with all of the specific information for a given employee.  *  * @param mid The MID of the personnel in question.  * @return A PersonnelBean representing the employee.  * @throws DBException  */  /**  * Updates the demographics for a personnel.  *  * @param p The personnel bean with the updated information.  * @throws DBException  */  /**  * Indicates whether a certain personnel is in the database.  *  * @param pid The MID of the personnel in question.  * @return A boolean indicating whether this personnel exists.  * @throws DBException  */  /**  * Returns all of the hospitals this LHCP is associated with.  *  * @param mid The MID of the personnel in question.  * @return A java.util.List of HospitalBeans.  * @throws DBException  */  /**  * Returns all personnel in the database.  *  * @return A java.util.List of personnel.  * @throws DBException  */  /**  * Returns a list of UAPs who work for this LHCP.  *  * @param hcpid The MID of the personnel in question.  * @return A java.util.List of UAPs.  * @throws DBException  */  /**  * Given a prescription that has been given, this method returns all the information for the  * doctor who authorized that prescription.  *  * @param prescription The PrescriptionBean describing the prescription in question.  * @return The PersonnelBean describing the doctor who authorized it.  * @throws DBException  */  /**  * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.  *  * @param first The first name to be searched for.  * @param last The last name to be searched for.  * @return A java.util.List of personnel who match these names.  * @throws DBException  */  /**  * Returns list of personnel who are Lab Techs.  * @return List of personnel beans.  * @throws DBException  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Get all referrals associated with a particular office visit.  * @param ovid The office visit id.  * @return A list of ReferralBeans.  * @throws DBException  */  /**  * Gets a list of all referrals sent from an HCP  * @param mid The HCP's mid.  * @return The list of the referrals they sent.  * @throws DBException  */  /**  * Get a specific referral.  * @param id The id of the referral to retrieve.  * @return A ReferralBean.  * @throws DBException  */  /**  * Set referral message.  * @param id The id of the referral to retrieve.  * @return A ReferralBean.  * @throws DBException  */  /**  * Set referral message.  * @param id The id of the referral to retrieve.  * @return A ReferralBean.  * @throws DBException  */  /**  * Gets a list of all referrals sent to an HCP  * @param mid The HCP's mid.  * @return The list of the referrals sent to them.  * @throws DBException  */  /**  * Gets a list of all referrals a HCP has received  * @param mid The patients's mid.  * @return The list of the referrals they received.  * @throws DBException  */  /**  * Gets a list of all referrals sent to a patient.  * @param mid The patients's mid.  * @return The list of the referrals they received.  * @throws DBException  */  /**  * Gets a list of all referrals sent to a patient  * @param mid The patients's mid.  * @return The list of the referrals they received that were unread.  * @throws DBException  */  /**  * Gets a list of all referrals sent to a patient  * @param mid The patients's mid.  * @return The list of the referrals they received that were unread.  * @throws DBException  */  /**  * Updates a given referral in the database.  * @param r The referral to update.  * @throws DBException  */  /**  * Adds a given referral to the database.  * @param r The referral to add.  * @throws DBException  */  /**  * Removes the given referral.  *  * @param id The unique ID of the referral to be removed.  * @throws DBException  */  /**  * Get a referral query for a sending HCP.  * @param mid The HCP id.  * @return A ReferralListQuery object.  */  /**  * Get a referral query for a receiving HCP.  * @param mid The HCP id.  * @return A ReferralListQuery object.  */  /**  * Get a referral query for a patient.  * @param mid The patient id.  * @return A ReferralListQuery object.  */  /**  * Perform the query.  *  * @param sortField The pseudo-field name in which to sort.  * @param dir The direction of the desired sort (ascending or  * 			  descending)  * @return A list of VerboseReferralBeans.  * @throws DBException  */  /**  * Perform the query.  *  * @param sortField The pseudo-field name in which to sort.  * @param dir The direction of the desired sort (ascending or  * 			  descending)  * @return A list of VerboseReferralBeans.  * @throws DBException  */  /**  * Get the name of the user pseudo-field which is used to limit the  * query.  Only referrals where this field equals a specific user id  * will be returned.  This must be overridden by derived classes.  *  * @return The user field as a string.  */   /**  * Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).  *  * @param sortField The pseudo-field to sort on.  * @param dir The sort direction.  * @return A string which can be a part of an SQL query.  */
/**  * Return remote monitoring list data for a given patient.  *  * @param patientMID Patient to retrieve data for.  * @return List of TelemedicineBeans  * @throws DBException  */  /**  * Returns patient data for a given HCP  *  * @return  * @throws DBException  */   /**  * Get the requested type of data for the specified patient.  *  * @param patientMID The MID of the patient  * @param dataType The type of telemedicine data to return  * @return A list of beans which all contain information of the requested type  * @throws DBException  */  /**  * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table  *  * @param patientMID The MID of the patient  * @param height The height of the patient  * @param weight The weight of the patient  * @param pedometerReading The pedometer reading of the patient  * @param reporterRole  The role of the person that reported these monitoring stats  * @param reporterMID  The MID of the person that reported these monitoring stats  * @throws DBException  */  /**  * Private method to get the number of entries for a certain patientID and a certain  * data type for today.  * @param patientMID  * @param dataType  * @return the number of entries  * @throws DBException  */   /**  * Show the list of HCPs monitoring this patient  *  * @param patientMID The MID of the patient  * @return list of HCPs monitoring the provided patient  */  /**  * Add a patient to the list of HCPs' monitoring lists of Patients  *  * @param patientMID The MID of the patient  * @param HCPMID The MID of the HCP  * @param tBean The TelemedicineBean indicating what telemedicine data the patient is allowed to enter.  * @return true if added successfully, false if already in list  */  /**  * Remove a patient from the list of HCPs' monitoring lists of Patients  *  * @param patientMID The MID of the patient  * @param HCPMID The MID of the HCP  * @return true if removed successfully, false if not in list  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Method that sends exactly one e-mail to each MID in the list of Adverse Events  * @param aeList The list of adverse Event Beans that need to be acted upon  * @return EList The list of e-mails sent for testing purposes  */  /**  * A method used to send a single e-mail. Used in immunizations.  * @param aeBean  * @return Email returns the Email for testing purposes.  */  /**  * Method used to add a report to the data base  * @param aeBean The adverse event to add  * @return a string for testing purposes only  * @throws iTrustException  * @throws FormValidationException  * @throws DBException  */
/**  * Returns a full bean describing a given report request.  *  * @param id The unique ID of the bean in the database.  * @return The bean describing this report request.  * @throws DBException  */  /**  * Returns all report requests associated with a given requester.  *  * @param mid The MID of the personnel in question.  * @return A java.util.List of report requests.  * @throws DBException  */  /**  * Returns all of the report requests associated with a specific patient.  *  * @param pid The MID of the patient in question.  * @return A java.util.List of report requests.  * @throws DBException  */  /**  * Adds a request for a report.  *  * @param requesterMID The MID of the requester.  * @param patientMID The MID of the patient in question.  * @param date The date the request was made.  * @return A long of the unique ID of the report request.  * @throws DBException  */  /**  * Sets the status of a report request to 'Viewed'  *  * @param ID The unique ID of the request in question.  * @param date The date the request was viewed.  * @throws DBException  */
/**  * Checks to see if a user exists with the given mid  *  * @param midString The user's MID to check for.  * @return 0 if the user does not exist, else the mid of the user as a long  */  /**  * Checks to see if the number of reset password attempts has been exceeded for the given ipAddress  *  * @param ipAddress The IPv4 or IPv6 IP address as a String.  * @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS  * @throws DBException  */  /**  * Checks if the given mid matches the given role  *  * @param mid  *            the mid to be checked  * @param role  *            the role to be checked  * @return true if the mid and role match  * @throws iTrustException  */  /**  * Checks if the answer param is null  *  * @param answer the user's security answer  * @return answer if not null, else return null  */  /**  * Returns the security question for the mid param  *  * @param mid MID of the user  * @return the security question or "" if DBException thrown  * @throws iTrustException  */  /**  * Resets the password for the given mid  *  * @param mid of the user to have their password reset  * @param role what role the user has in iTrust  * @param answer answers to their security question  * @param password their password  * @param confirmPassword their password again  * @param ipAddr the ip address the request is coming from  * @return status message  * @throws FormValidationException  * @throws DBException  * @throws iTrustException  */  /**  * Creates and sends an e-mail about the change  *  * @param mid the user who's password was changed  * @param role what role they have in iTrust  * @return the e-mial that is sent  * @throws DBException  */
/**  * @return The name of the disease being checked.  */  /**  * @return A java.util.List of the risk factors increasing this patients disease risk.  */  /**  * @return A boolean indicating whether the patient is at increased risk.  */  /**  * This method exists purely for performance - just stop once you hit the threshold. <br />  * <br />  * Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there  * should be no double-querying  *  * @return isAtRisk  */  /**  * @return A java.util.List of patient risk factors associated with this disease.  */
/**  * Searches for all personnel with the first name and last name specified in the parameter list.  * @param firstName The first name to be searched.  * @param lastName The last name to be searched.  * @return A java.util.List of PersonnelBeans for the users who matched.  */  /**  * Search for all patients with first name and last name given in parameters.  * @param firstName The first name of the patient being searched.  * @param lastName The last name of the patient being searched.  * @return A java.util.List of PatientBeans  */
/**  * Performs the act of validating the bean in question, which varies depending on the  * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.  *  * @param p A bean of the type to be validated.  */
/**  * Sends a message  *  * @param mBean message to be sent  * @throws iTrustException  * @throws SQLException  */  /**  * Returns the patient's name  *  * @param mid MId of the patient  * @return the name of the patient  * @throws iTrustException  */  /**  * Returns the personnel's name  *  * @param mid MId of the personnel  * @return the name of the personnel  * @throws iTrustException  */  /**  * Returns a list of the patients that the logged in HCP represents  *  * @return list of the patients that the logged in HCP represents  * @throws iTrustException  */  /**  * Returns the designated HCPs for the logged in patient.  *  * @return designated HCPs for the logged in patient.  * @throws iTrustException  */  /**  * Returns the designated HCPs for the given patient.  *  * @return designated HCPs for the given patient.  * @throws iTrustException  */
/**  * Called when the HttpSession is created, this method pulls the pre-specified limit from the  * database and sets it as a property of the HttpSession.  * @param arg0 The HttpSessionEven which just occurred.  */  /**  * Must be declared for compliance with the interface. Not implemented.  */
/**  * Updates information in the database from the information held in the SecurityQA bean passed as a param  *  * @param a  *            SecurityQuestionBean that holds new information  * @throws Exception  */  /**  * Returns a SecurityQA bean holding the security info for the currently logged in user  *  * @return SecurityQA for loggedInMid  * @throws iTrustException  */
/**  * Pass the OfficeVistBean along with SurveyBean  * @param surveyBean contains data to be added to database  * @param visitID The Office Visit ID corresponding to this Survey.  * @throws DBException  */
/**  * Insert survey data into database.  * @param surveyBean The Bean representing the user's responses which will be inserted.  * @param date The date the survey was completed.  */  /**  * Gets survey data from the database by the office visit id. Creates an instance of an  * SurveyBean with data and returns it.  *  * @param id The unique ID of the survey in question.  * @return A bean containing the SurveyBean.  * @throws DBException  */  /**  * Has this survey been completed?  *  * @param visitID The unique ID of the office visit we are wondering about.  * @return boolean indicating whether this survey is completed.  * @throws DBException  */
/**  * Returns all the survey results in the database that correspond to a particular zip code.  *  * @param zip The zipcode we are interested in as a String.  * @param specialty The specialty we are interested in as a String.  * @return A java.util.List of SurveyResultBeans.  * @throws DBException  */  /**  * Returns all the survey data associated with a given hospital and a certain specialty.  *  * @param hospitalID The unique ID of the iTrust hospital we are querying about.  * @param specialty A string representing the specialty we are interested in.  * @return A java.util.List of SurveyResultBeans.  * @throws DBException  */
/**  * Returns the whole transaction log  *  * @return  * @throws DBException  */  /**  * Log a transaction, just giving it the person who is logged in and the type  *  * @param type The {@link TransactionType} enum representing the type this transaction is.  * @param loggedInMID The MID of the user who is logged in.  * @throws DBException  */  /**  * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on  * the transaction type.  *  * @param type The {@link TransactionType} enum representing the type this transaction is.  * @param loggedInMID The MID of the user who is logged in.  * @param secondaryMID Typically, the MID of the user who is being acted upon.  * @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity).  * @throws DBException  */  /**  * Return a list of all transactions in which an HCP accessed the given patient's record  *  * @param patientID The MID of the patient in question.  * @return A java.util.List of transactions.  * @throws DBException  */  /**  * The Most Thorough Fetch  * @param mid MID of the logged in user  * @param dlhcpID MID of the user's DLHCP  * @param start Index to start pulling entries from  * @param range Number of entries to retrieve  * @return List of <range> TransactionBeans affecting the user starting from the <start>th entry  * @throws DBException  */  /**  * Return a list of all transactions in which an HCP accessed the given patient's record, within the dates  *  * @param patientID The MID of the patient in question.  * @param lower The starting date as a java.util.Date  * @param upper The ending date as a java.util.Date  * @return A java.util.List of transactions.  * @throws DBException  */  /**  * Returns the operation profile  *  * @return The OperationalProfile as a bean.  * @throws DBException  */  /**  * @param tbList  * @param patientID  * @param sortByRole  * @return  * @throws DBException  */


/**  * Adds a new cpt code (med procedure)  *  * @param proc  *            ProcedureBean that holds the new cpt code  * @return status message  * @throws FormValidationException  */  /**  * Updates a procedure with new information from the ProcedureBean  *  * @param proc  *            ProcedureBean with new information (but same CPT code)  * @return Status message  * @throws FormValidationException  */  /**  * Updates the cpt code  *  * @param proc the code to be updated  * @return updated code  * @throws DBException  */
/**  * Adds a hosptial using the HospitalBean passed as a param  *  * @param hosp  *            the new hospital listing  * @return Status message  * @throws FormValidationException  */  /**  * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a  * param  *  * @param hosp  *            the new hospital information with the same hospital id  * @return Status message  * @throws FormValidationException  */  /**  * Updates hospital  *  * @param hosp new information  * @return id for the updated hospital  * @throws DBException  */
/**  * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param  *  * @param diagn  *            The new diagnosis (ICD code)  * @return Status message  * @throws FormValidationException  */  /**  * Updates a diagnosis with new information from the DiagnosisBean passed as a param  *  * @param diagn  *            new information to update (but same code)  * @return Status message  * @throws FormValidationException  */
/**  * Adds a new LOINC  *  * @param diagn  *            New LOINC  * @return Status message  * @throws FormValidationException  */  /**  * Updates a LOINC  *  * @param diagn  *            new information to update (but same code)  * @return Status message  * @throws FormValidationException  */
/**  * Adds a new ND Code (prescription) to the list  *  * @param med  *            The new ND Code to be added  * @return Status message  * @throws FormValidationException  */  /**  * Updates the ND Code with new information from the MedicationBean  *  * @param med  *            the MedicationBean that holds new information but the same code  * @return status message  * @throws FormValidationException  */  /**  * Medication information should already be validated  *  * @param med  * @return  * @throws DBException  */  /**  * Removes a ND Code (prescription) from the list  *  * @param med The ND Code to be removed  *  * @return Status message  * @throws DBException  */
/**  * Gets a PatientBean from an MID  *  * @param patientID MID of the patient  * @return PatientBean for the MID given  * @throws iTrustException  */  /**  * Gets the logged in person's representees  *  * @return list of PatientBeans holding the representees  * @throws iTrustException  */  /**  * Returns the prescribing HCP for a prescription  *  * @param prescription item in question  * @return HCP who prescribed the prescription  * @throws iTrustException  */  /**  * Returns all the prescriptions for a given patient  *  * @param patientID patient in question  * @return list of all the prescriptions for that patient  * @throws iTrustException  */
/**  * Returns a list of TransactionBeans between the two dates passed as params  *  * @param lowerDate  *            the first date  * @param upperDate  *            the second date  * @return list of TransactionBeans  * @throws DBException  * @throws FormValidationException  */  /**  * Returns the date of the first Transaction in the list passed as a param if the list is not empty  * otherwise, returns today's date  *  * @param accesses A java.util.List of TransactionBeans for the accesses.  * @return A String representing the date of the first transaction.  */  /**  * Returns the date of the last Transaction in the list passed as a param if the list is not empty  * otherwise, returns today's date  *  * @param accesses A java.util.List of TransactionBeans storing the access.  * @return A String representation of the date of the last transaction.  */  /**  * Return a list of patients that pid represents  *  * @param pid The id of the personnel we are looking up representees for.  * @return a list of PatientBeans  * @throws iTrustException  */
/**  * Gets all the messages for the logged in user  *  * @return a list of all the user's messages  * @throws SQLException  */  /**  * Gets all the messages for the logged in user and sorts by ascending time  *  * @return a list of all the user's messages  * @throws SQLException  */  /**  * Gets all the messages for the logged in user and sorts names in ascending order  *  * @return a list of all the user's messages  * @throws SQLException  */  /**  * Gets all the messages for the logged in user and sorts name in descending order  *  * @return a list of all the user's messages  * @throws SQLException  */  /**  * Gets all the sent messages for the logged in user  *  * @return a list of all the user's sent messages  * @throws SQLException  */  /**  * Gets all the messages for the logged in user and sorts by ascending time  *  * @return a list of all the user's messages  * @throws SQLException  */  /**  * Gets all the messages for the logged in user and sorts names in ascending order  *  * @return a list of all the user's messages  * @throws SQLException  */  /**  * Gets all the messages for the logged in user and sorts name in descending order  *  * @return a list of all the user's messages  * @throws SQLException  */   /**  * Gets a list of messages for a user based on their filter criteria.  *  * @param messages List of all of a user's MessageBeans  * @param filter String containing a user's filter criteria.  * @return a List of MessageBeans that meet the criteria of the filter.  * @throws iTrustException  * @throws ParseException  */  /**  * Gets a patient's name from their MID  *  * @param mid the MID of the patient  * @return the patient's name  * @throws iTrustException  */  /**  * Gets a personnel's name from their MID  *  * @param mid the MID of the personnel  * @return the personnel's name  * @throws iTrustException  */  /**  * Set the state of the MessageBean to read, after  * it is read by a user.  * @param mBean MessageBean to be read  */  /**  * Get the number of unread messages that the current user has.  *  * @return The number of unread messages.  * @throws SQLException  */
/**  * Takes the patient's representee as a param and returns it as a long if the patient represents the input  * param  *  * @param input  *            the patient's representee mid  * @return representee's mid as a long  * @throws iTrustException  */  /**  * Returns a PatientBean for the currently logged in patient  *  * @return PatientBean for the currently logged in patient  * @throws iTrustException  */  /**  * Returns a PatientBean for the specified MID  * @param mid id of the requested bean  * @return PatientBean for the specified MID  * @throws iTrustException  */  /**  * Returns a PersonnelBean for the requested MID  * @param mid id of the requested bean  * @return a PersonnelBean for the requested MID  * @throws iTrustException  */  /**  * Returns a PatientBean for the currently logged in patient  *  * @return PatientBean for the currently logged in patient  * @throws iTrustException  */  /**  * Returns a list of AllergyBeans for the currently logged in patient  *  * @return a list of AllergyBeans for the currently logged in patient  * @throws iTrustException  */  /**  * Returns a list of Parents, Siblings, and Children of the currently logged in patient  *  * @return list of FamilyMemberBeans  */  /**  * Returns a list of Parents, Siblings, and Grand Parents of the currently logged in patient  *  * @return list of FamilyMemberBeans  */  /**  * Returns a list of HealthRecords for the currently logged in patient  *  * @return a list of HealthRecords for the currently logged in patient  * @throws iTrustException  */  /**  * Returns a list of HealthRecords for the specified family member  *  * @return a list of HealthRecords for the specified family member  * @throws iTrustException  */  /**  * Returns a list of OfficeVisitBeans for all office visits for the currently logged in patient  *  * @return  a list of OfficeVisitBeans for all office visits for the currently logged in patient  * @throws iTrustException  */  /**  * Returns a complete OfficeVisitBean given a visitID  *  * @return a complete OfficeVisitBean given a visitID  * @throws iTrustException  */   /**  * Returns a list of PatientBeans of all patients the currently logged in patient represents  *  * @return a list of PatientBeans of all patients the currently logged in patient represents  * @throws iTrustException  */  /**  * Returns a list of PatientBeans of all patients the currently logged in patient represents  *  * @return a list of PatientBeans of all patients the currently logged in patient represents  * @throws iTrustException  */  /**  * Has a survey been created for this office visit  *  * @param visitID ID of the office visit in question  * @return true if the survey has been completed, otherwise false  * @throws iTrustException  */  /**  * Returns a list of lab procedures  *  * @return a list of lab procedures for the logged in patient  * @throws DBException  */    /**  * Returns all the report requests for the logged in patient  * @return the report requests for the logged in patient  * @throws iTrustException  */  /**  * Checks to see if family members have high blood pressure  *  * @param member the family member in question  * @return true if the family member has the risk factor, otherwise false.  * @throws iTrustException  */  /**  * Checks to see if family members have high cholesterol  *  * @param member the family member in question  * @return true if the family member has the risk factor, otherwise false.  * @throws iTrustException  */  /**  * Checks to see if family members have diabetes  *  * @param member the family member in question  * @return true if the family member has the risk factor, otherwise false.  * @throws iTrustException  */  /**  * Checks to see if family members have cancer  *  * @param member the family member in question  * @return true if the family member has the risk factor, otherwise false.  * @throws iTrustException  */  /**  * Checks to see if family members have heart disease  *  * @param member the family member in question  * @return true if the family member has the risk factor, otherwise false.  * @throws iTrustException  */  /**  * Checks to see if family members smoke  *  * @param member the family member in question  * @return true if the family member has the risk factor, otherwise false.  * @throws iTrustException  */  /**  * Checks to see if family member is dead, and if so, what their cause of death was  *  * @param member the family member in question  * @return the cause of death for the family member  * @throws iTrustException  */
/**  * Returns a list of RemoteMonitoringDataBeans for the logged in HCP  *  * @return list of TransactionBeans  * @throws DBException  * @throws FormValidationException  */  /**  * Returns a list of RemoteMonitoringDataBeans for the logged in HCP  *  * @return list of TransactionBeans  * @throws DBException  * @throws FormValidationException  */  /**  * Returns a list of RemoteMonitoringDataBeans for the logged in HCP based on a certain data type  * @param patientMID  * @param dataType  * @return list of TransactionBeans  * @throws DBException  * @throws FormValidationException  */   /**  * returns the patient name  *  * @return patient name  * @throws DBException  * @throws iTrustException  */  /**  * Useful to figure out who is monitoring a given patient  *  * @return list of HCPs monitoring this patient  * @throws DBException  * @throws iTrustException  */
/**  * Returns all the reports for the currently logged in HCP  *  * @return list of all reports for the logged in HCP  * @throws iTrustException  */  /**  * Adds a report request to the list  *  * @param patientMID ID of the patient that the report request is for  * @return  * @throws iTrustException  */  /**  * Returns the requested report  *  * @param ID id of the requested report  * @return the requested report  * @throws iTrustException  */  /**  * Sets the viewed status of the report.  If the report is "viewed" the HCP must request a new one to see it again.  *  * @param ID id of the report  * @throws iTrustException  */  /**  * Gets the status of the request  *  * @param id id of the request  * @return the request's status  * @throws iTrustException  */
/**  * Adds all the office visits for the logged in HCP to a list.  *  * @throws iTrustException  */  /**  * Checks to see if a patient is in the list of  visits  * @param pb patient to check  * @param date date of the visit  * @return True if the patient is in the list of visits.  */  /**  * Get the list of patients an HCP has had office visits with  *  * @return the list of patients an HCP has had office visits with  * @throws DBException  */  /**  * Returns a PersonnelBean for the logged in HCP  * @return PersonnelBean for the logged in HCP  * @throws iTrustException  */
/**  * Gets a PatientBean from an MID  *  * @param patientID MID of the patient  * @return PatientBean for the MID given  * @throws iTrustException  */  /**  * Gets the logged in person's representees  *  * @return list of PatientBeans holding the representees  * @throws iTrustException  */  /**  * Returns the prescribing HCP for a prescription  *  * @param prescription item in question  * @return HCP who prescribed the prescription  * @throws iTrustException  */  /**  * Returns all the prescriptions for a given patient  *  * @param patientID patient in question  * @return list of all the prescriptions for that patient  * @throws iTrustException  */
/**  * Uses PatientDAO as a helper class to return a list of patients with a special-diagnosis-history who  * have the logged in HCP as a DHCP and whose medications are going to  * expire within seven days.  *  * @return A list of PatientBean's  */
/**  *  Get diagnosis list for the given patient  * @param pid the patient of interest  * @return list of diagnoses  * @throws iTrustException  */  /**  *  Get procedure list for the given patient  * @param pid the patient of interest  * @return list of procedures  * @throws iTrustException  */  /**  *  Get prescription list for the given patient  * @param pid the patient of interest  * @return list of prescriptions  * @throws iTrustException  */  /**  *  Get declared HCPs list for the given patient  * @param pid the patient of interest  * @return list of declared HCPs  * @throws iTrustException  */  /**  * Returns a PersonnelBean when given an MID  * @param mid HCP of interest  * @return PersonnelBean of the given HCP  * @throws iTrustException  */  /**  * Returns a PaitentBean when given an MID  * @param mid patient of interest  * @return PatientBean of the given HCP  * @throws iTrustException  */
/**  * Retrieves survey results for a whole hospital.  * @param bean The SurveyResultBean containing the survey result specs.  * @return A java.util.List of Survey Results.  * @throws iTrustException  * @throws FormValidationException  */  /**  * Retrieves survey results for a given zip code.  * @param bean The SurveyResultBean containing the survey result specs.  * @return A java.util.List of Survey Results.  * @throws iTrustException  * @throws FormValidationException  */
/**  * Create an HCPVisitBean from a given PersonnelBean and office visit date.  *  * @param pb The PersonnelBean that will be visited.  * @param visitDate The date of the visit.  This may be the empty string.  * @return The new HCPVisitBean.  * @throws DBException  */  /**  * Checks to see if a PersonnelBean matches against a given set of  * criteria.  *  * @param pb The PersonnelBean to check.  * @param lastName The last name to check against.  May be null or the empty string to ignore.  * @param specialty The specialty to check against.  May be null or the empty string to ignore.  * @param zip The zip code to check against.  May be null or the empty string to ignore.  * @return true if the PersonnelBean matches all the given parameters, or false otherwise.  */  /**  * Get a list of all HCPs visited and/or designated by by the current  * user.  The list can optionally be filtered by the doctor's last name,  * specialty, or zip code.  *  * @param lastName The last name (or a part of it) of the doctor to search  * 				   for, or null or an empty string to accept all doctors.  * @param specialty The specialty of the doctor to search for, or null or  * 					an empty string to accept all doctors.  * @param zip The zip code of the doctor to search for, or null or an empty  * 			  string to accept all doctors.  * @return A list of HCPVisitBeans where each represents one HCP that has  * 	       been visited or has been designated.  * @throws iTrustException  */  /**  * Returns a list of all the visited and/or designated HCPs.  * @return list of all the visited HCPs  */  /**  * Given an HCP's name, return the corresponding HCPVisitBean.  * @param name  * @return  */  /**  * Set a given HCP as undeclared.  *  * @param name HCP to undeclare.  * @return An empty string.  * @throws iTrustException  */  /**  * Set a given HCP as declared  *  * @param name HCP to declare  * @return An empty string.  * @throws iTrustException  */  /**  * Check to see if a given HCP is declared  * @param mid HCP to check  * @return true if the HCP is declared, otherwise false  */  /**  * Filter the list of HCPs by last name, specialty, or zip code.  * @param doc Filter by lastName.  May be null or the empty string to  * 			  ignore.  * @param specialty Filter by specialty.  May be null or the empty string  *   			    to ignore.  * @param zip Filter by zip.  May be null or the empty string to ignore.  * @return Filtered list of HCPs.  */
/**  * Returns a list of patients associated with a given HCP.  *  * @param hcpid The MID of the HCP in question.  * @return A java.util.List of Visit Reminder Forms.  */  /**  * Returns a list of patients who need a visit for this HCP. This means:  *  * Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -  * Circulatory-System Disease: [ 390.00 , 459.99 ]  *  * @param hcpid The MID of the HCP in question.  * @return A java.util.List of visit reminders.  */  /**  * Returns a list of old people who need a flu shot  *  * CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months  * 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if  * not in 09 - 12  *  * Determines current date and calls one of two private methods these methods return different sets of  * people - a: people who haven't had a flu shot yet this year and need one - b: people who missed last  * year's flu shot and need a check-up  *  * @return A java.util.List of Visit Reminder Forms.  * @param hcpid The MID of the HCP in question.  * @param patientBirthday The birthday of the patient in question.  * @throws DBException  */