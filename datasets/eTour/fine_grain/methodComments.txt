/**  * Method which removes news from the database. Uses the (@Link Boolean  * unisa.gps.etour.repository.IDBNews # clearNews (int))  *  * @Param id pNewsID news be erased.  * @Return true if the clearing was successful or FALSE otherwise.  * @Throws RemoteException  */  /**  * Insert a new news in the database. Use the method (@link  * unisa.gps.etour.repository.IDBNews # insertNews (BeanNews)) To insert the  * news and the method (@link unisa.gps.etour.repository.IDBNews # getNews  * ()) To count the number of news in the system.  *  * @Param pNews bean containing data news.  * @Return true if the insertion is successful, false if it was Reached the  *         maximum number of news stored or if the insertion fails.  * @Throws RemoteException  */  /**  * Method to change data of a news. Use the method (@link  * unisa.gps.etour.repository.IDBNews # modifyNews (BeanNews)).  *  * @Param pNews bean containing the data of news changed.  * @Return true if the change goes through.  * @Throws RemoteException  */
/**  * Delete a banner and the image associated with the system.  *  * @Param id of the banner to remove pBannerID  */  /**  * Method to change the image associated with the banner: Delete the old image  * and stores the new Enjoy the same path as the old image.  *  * @Param id pBannerID banner  * @Param pImage ImageIcon object containing the new image of the banner  * @Return returns true if the operation is successful  */   /**  * Create and insert a new banner, making sure the num. maximum Banner displayed  * for a refreshment point is Already been reached in this case throws an  * exception to the calling method.  *  * @Param Id pIdRefreshmentPoint of refreshment  * @Param pImageBanner ImageIcon object containing the banner image  * @Return Returns true if the insertion has been successful.  */


/**  * Method that returns the custom component for the Display of the data  * contained in the cell of a table.  *  * @Param pTable JTable - the table.  * @Param Object pValue - the data.  * @Param boolean pSelected --  * @Param boolean pHasFocus --  * @Param int pRow - the line number.  * @Param int pColumn - the column number.  * @Return Component - the component that customizes render the cell.  * @Throws IllegalArgumentException - if the value of the cell can not Be  *         rendered by this renderer.  */
/**  * This method initializes the content pane.  *  * @Return javax.swing.JPanel - the content pane.  */  /**  * This method initializes the toolbar to the functions of management Banner.  *  * @Return javax.swing.JToolBar - the toolbar.  */  /**  * This method initializes the button to insert a banner.  *  * @Return javax.swing.JButton - the button for the insertion.  */  /**  * This method initializes the button for editing a banner.  *  * @Return javax.swing.JButton - the button for the change.  */  /**  * This method initializes the delete button for a banner.  *  * @Return javax.swing.JButton - the delete button for.  */  /**  * This method creates the tree starting from the information contained in the  * two ArrayList of bean.  *  * @Param ArrayList PPR <BeanRefreshmentPoint> - the array of places to eat.  * @Param pBanner ArrayList <BeanBanner> - the array of banners associated.  */  /**  * This method initializes the tree where it displays the banner.  *  * @Return javax.swing.JTree  */  /**  * This method initializes the right side panel.  *  * @Return javax.swing.JPanel - the right panel.  */  /**  * This method initializes the panel that contains the online help.  *  * @Return javax.swing.JPanel - the panel for the guide.  */  /**  * This method initializes the panel for the detection of points Refreshments.  *  * @Return javax.swing.JPanel - the panel for research.  */  /**  * This method initializes the button for the submission of the form Search for  * a refreshment.  *  * @Return javax.swing.JButton - the search button.  */  /**  * This method initializes the button to reset the fields of Search Form for a  * refreshment.  *  * @Return javax.swing.JButton - the Reset button.  */  /**  * This method opens the dialog box for entering a new Banner or editing a  * banner selected.  *  * @Param pSelectedNode DefaultMutableTreeNode - the selected node.  */
/**  * This method initializes the image contained in the preview.  *  * @Param pBanner ImageIcon - an image of a banner.  */  /**  * This method returns the image contained in the preview.  *  * @Return ImageIcon - the image of the banner.  */  /**  * This method opens the dialog for selecting a file from disk.  *  * @Return  *         <ul>  *         <li>Files - the selected file.  *         <li>Null - if you have not selected any files. </ Ul>  */
/**  * Returns the node type PRNode father.  *  * @Return PRNode - the parent node.  */  /**  * Returns the id of the banner for which information Are stored in this node.  *  * @Return int - the id of the banner.  */  /**  * Stores the id of the banner supplied input.  *  * @Param int pId - an ID of a banner.  */  /**  * Returns the banner image.  *  * @Return ImageIcon - the image.  */  /**  * Save the image provided as input.  *  * @Param pImage Imagelcon - the image to be stored.  * @Throws IllegalArgumentException - if the supplied parameter is null.  */

/**  * Sets the new value of filepath  *  * @Param pPathFile New value filepath.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Returns the value of idRefreshmentPoint  *  * @Return value idRefreshmentPoint.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */  /**  * Sets the new value of idRefreshmentPoint  *  * @Param value pIdRefreshmentPoint New idRefreshmentPoint.  */
/**  * Returns the value of active  *  * @Return value of assets.  */  /**  * Sets the new value of active  *  * @Param new value terms of assets.  */  /**  * Returns the value of EndDate  *  * @Return Value EndDate.  */  /**  * Sets the new value for EndDate  *  * @Param pDataEnd New value for EndDate.  */  /**  * Returns the value of StartDate  *  * @Return value StartDate.  */  /**  * Sets the new value of StartDate  *  * @Param new value pDataStart StartDate.  */  /**  * Returns the value of maxBanner  *  * @Return value maxBanner.  */  /**  * Sets the new value of maxBanner  *  * @Param value pMaxBanner New maxBanner.  */  /**  * Returns the value of money  *  * @Return value price.  */  /**  * Sets the new value of money  *  * @Param pPrice New value for money.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Returns the value of idRefreshmentPoint  *  * @Return value idRefreshmentPoint.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */  /**  * Sets the new value of idRefreshmentPoint  *  * @Param value pIdRefreshmentPoint New idRefreshmentPoint.  */
/**  * Returns the value of closingDay  *  * @Return value closingDay.  */  /**  * Sets the new value of closingDay  *  * @Param value pClosingDay New closingDay.  */  /**  * Returns the value of cap  *  * @Return value cap.  */  /**  * Sets the new value of cap  *  * New pCap * @param value cap.  */  /**  * Returns the value of city  *  * @Return Value of city.  */  /**  * Sets the new value of city  *  * @Param value New pCity city.  */  /**  * Returns the value of ticketCost  *  * @Return value ticketCost.  */  /**  * Sets the new value of ticketCost  *  * @Param value pTicketCost ticketCost.  */  /**  * Returns the value of description  *  * @Return value of description.  */  /**  * Sets the new value of description  *  * @Param pDescription New value of description.  */  /**  * Returns the value of location  *  * @Return location values.  */  /**  * Sets the new value of location  *  * @Param pLocation New locale values.  */  /**  * Returns the value of averageRating  *  * @Return value averageRating.  */  /**  * Sets the new value of averageRating  *  * @Param value pAverageRating averageRating.  */  /**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new name value  *  * @Param name New value pName.  */  /**  * Returns the value of ratingNumber  *  * @Return value ratingNumber.  */  /**  * Sets the new value of ratingNumber  *  * @Param value pRatingNumber New ratingNumber.  */  /**  * Returns the value of openingTime  *  * @Return value openingTime.  */  /**  * Sets the new value of openingTime  *  * @Param value pString New openingTime.  */  /**  * Returns the value of closingTime  *  * @Return value closingTime.  */  /**  * Sets the new value of closingTime  *  * @Param value pClosingTime New closingTime.  */  /**  * Returns the value of position  *  * @Return value of position.  */  /**  * Sets the new position value  *  * @Param pPosition New position value.  */  /**  * Returns the value of the province  *  * @Return value of the province.  */  /**  * Sets the new value of the province  *  * @Param pProvince New value for the province.  */  /**  * Returns the value of telephone  *  * @Return Value of the phone.  */  /**  * Sets the new value of telephone  *  * @Param value New pPhone phone.  */  /**  * Returns the value of street  *  * @Return value on.  */  /**  * Sets the new value via  *  * @Param value New pStreet on.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */
/**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new name value  *  * @Param name New value pName.  */  /**  * Returns the value of money  *  * @Return value price.  */  /**  * Sets the new value of money  *  * @Param pPrice New value for money.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Returns the value of idMenu  *  * @Return value idMenu.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */  /**  * Sets the new value of idMenu  *  * @Param value pIdMenu New idMenu.  */
/**  * Returns the value of dimensioneFont  *  * @Return value dimensioneFont.  */  /**  * Sets the new value of dimensioneFont  *  * @Param value pDimensioneFont New dimensioneFont.  */  /**  * Returns the value of font  *  * @Return Value of fonts.  */  /**  * Sets the new value of font  *  * New value * @param pFont font.  */  /**  * Returns the value of the subject  *  * @Return value issue.  */  /**  * Sets the new value of the subject  *  * @Param value New pTheme theme.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Returns the value of usernameTourist  *  * @Return value usernameTourist.  */  /**  * Sets the new value of usernameTourist  *  * @Param value pIdTourist New usernameTourist.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */
/**  * Returns the value of days  *  * @Return Value of the day.  */  /**  * Sets the new value of days  *  * @Param value New pDay day.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Returns the value of idRefreshmentPoint  *  * @Return value idRefreshmentPoint.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */  /**  * Sets the new value of idRefreshmentPoint  *  * @Param value pIdRefreshmentPoint New idRefreshmentPoint.  */
/**  * Returns the value of dataPublication  *  * @Return value dataPublication.  */  /**  * Sets the new value of dataPublication  *  * @Param value pDataPublication New dataPublication.  */  /**  * Returns the value of dataDeadline  *  * @Return value dataDeadline.  */  /**  * Sets the new value of dataDeadline  *  * @Param value pDataDeadline New dataDeadline.  */  /**  * Returns the value of news  *  * @Return value of news.  */  /**  * Sets the new value of news  *  * @Param value New pNews news.  */  /**  * Returns the priority value  *  * @Return the priority value.  */  /**  * Set the new priority value  *  * @Param pPriority New priority value.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */
/**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new value of name  *  * @Param value New pSurname surname.  */  /**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new name value  *  * @Param name New value pName.  */  /**  * Returns the value of password  *  * @Return value of password.  */  /**  * Sets the new password value  *  * @Param pPassword new password value.  */  /**  * Returns the value of username  *  * @Return value of username.  */  /**  * Sets the new value of username  *  * @Param pUsername New value for username.  */  /**  * Sets the new value of id  *  * @Param new value of id pId.  */  /**  * Returns the value of id  *  * @Return value id.  */
/**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new value of name  *  * @Param value New pSurname surname.  */  /**  * Returns the value of email  *  * @Return value of email.  */  /**  * Sets the new value of email  *  * @Param pEmail New value of email.  */  /**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new name value  *  * @Param name New value pName.  */  /**  * Returns the value of password  *  * @Return value of password.  */  /**  * Sets the new password value  *  * @Param pPassword new password value.  */  /**  * Returns the value of username  *  * @Return value of username.  */  /**  * Sets the new value of username  *  * @Param pUsername New value for username.  */  /**  * Returns the value of idRefreshmentPoint  *  * @Return value idRefreshmentPoint.  */  /**  * Sets the new value of idRefreshmentPoint  *  * @Param value pIdRefreshmentPoint New idRefreshmentPoint.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */
/**  * Returns the value of cap  *  * @Return value cap.  */  /**  * Sets the new value of cap  *  * New pCap * @param value cap.  */  /**  * Returns the value of city  *  * @Return Value of city.  */  /**  * Sets the new value of city  *  * @Param value New pCity city.  */  /**  * Returns the value of description  *  * @Return value of description.  */  /**  * Sets the new value of description  *  * @Param pDescription New value of description.  */  /**  * Returns the value of closingDay  *  * @Return value closingDay.  */  /**  * Sets the new value of closingDay  *  * @Param value pClosingDay New closingDay.  */  /**  * Returns the value of location  *  * @Return locale values.  */  /**  * Sets the new value of location  *  * @Param pLocation New locale values.  */  /**  * Returns the value of averageRating  *  * @Return value averageRating.  */  /**  * Sets the new value of averageRating  *  * @Param value pAverageRating New averageRating.  */  /**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new name value  *  * @Param name New value pName.  */  /**  * Returns the value of ratingNumber  *  * @Return value ratingNumber.  */  /**  * Sets the new value of ratingNumber  *  * @Param value pRatingNumber New ratingNumber.  */  /**  * Returns the value of openingTime  *  * @Return value openingTime.  */  /**  * Sets the new value of openingTime  *  * @Param value pOpeningTime New openingTime.  */  /**  * Returns the value of closingTime  *  * @Return value closingTime.  */  /**  * Sets the new value of closingTime  *  * @Param value pClosingTime New closingTime.  */  /**  * Returns the value of Party  *  * @Return value of a political party.  */  /**  * Sets the new value of Party  *  * @Param pParty New value of political parties.  */  /**  * Returns the value of position  *  * @Return value of position.  */  /**  * Sets the new position value  *  * @Param pPosition New position value.  */  /**  * Returns the value of the province  *  * @Return value of the province.  */  /**  * Sets the new value of the province  *  * @Param pProvince New value for the province.  */  /**  * Returns the value of telephone  *  * @Return Value of the phone.  */  /**  * Sets the new value of telephone  *  * @Param value New pPhone phone.  */  /**  * Returns the value of street  *  * @Return value on.  */  /**  * Sets the new value via  *  * @Param value New pStreet on.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */
/**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new name value  *  * @Param name New value pName.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */
/**  * Returns the value of description  *  * @Return value of description.  */  /**  * Sets the new value of description  *  * @Param pDescription New value of description.  */  /**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new value of name  *  * @Param pName New value for name.  */  /**  * Returns the value of id  *  * @Return value id.  */  /**  * Sets the new value of id  *  * @Param pId New value for id.  */
/**  * Returns the value of cap  *  * @Return value cap.  */  /**  * Sets the new value of cap  *  * New pCap * @param value cap.  */  /**  * Returns the value of cityNascita  *  * @Return value cityNascita.  */  /**  * Sets the new value of cityNascita  *  * @Param value pCityNascita New cityNascita.  */  /**  * Returns the value of cityResidenza  *  * @Return value cityResidenza.  */  /**  * Sets the new value of cityResidenza  *  * @Param value pCityResidenza New cityResidenza.  */  /**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new value of name  *  * @Param value New pSurname surname.  */  /**  * Returns the value of dob  *  * @Return value dob.  */  /**  * Sets the new value of dob  *  * @Param value New pDateOfBirth dob.  */  /**  * Returns the value of dataRegistration  *  * @Return value dataRegistration.  */  /**  * Sets the new value of dataRegistration  *  * @Param value pDataRegistration New dataRegistration.  */  /**  * Returns the value of email  *  * @Return value of email.  */  /**  * Sets the new value of email  *  * @Param pEmail New value of email.  */  /**  * Returns the value of name  *  * @Return value of name.  */  /**  * Sets the new name value  *  * @Param name New value pName.  */  /**  * Returns the value of password  *  * @Return value of password.  */  /**  * Sets the new password value  *  * @Param pPassword new password value.  */  /**  * Returns the value of the province  *  * @Return value of the province.  */  /**  * Sets the new value of the province  *  * @Param pProvince New value for the province.  */  /**  * Returns the value of telephone  *  * @Return Value of the phone.  */  /**  * Sets the new value of telephone  *  * @Param value New pPhone phone.  */  /**  * Returns the value of street  *  * @Return value on.  */  /**  * Sets the new value via  *  * @Param value New pStreet on.  */  /**  * Returns the value of username  *  * @Return value of username.  */  /**  * Returns to be 1 or 0, indicating whether a tourist or not Active  *  * @Return value of activation  */  /**  * Sets the new value of active  *  * @Param new value terms of assets.  */  /**  * Sets the new value of username  *  * @Param pUsername New value for username.  */  /**  * Sets the new value of id  *  * @Param new value of id pId.  */  /**  * Returns the value of id  *  * @Return value id.  */
/**  * Returns the value of comment  *  * @Return value of comment.  */  /**  * Sets the new value of comment  *  * @Param value New pComment comment.  */  /**  * Returns the value of dataVisit  *  * @Return value dataVisit.  */  /**  * Sets the new value of dataVisit  *  * @Param value pDataVisit New dataVisit.  */  /**  * Returns the value of idCulturalHeritage  *  * @Return value idCulturalHeritage.  */  /**  * Sets the new value of idCulturalHeritage  *  * @Param value pIdCulturalHeritage New idCulturalHeritage.  */  /**  * Returns the value of IdTourist  *  * @Return value IdTourist.  */  /**  * Sets the new value of IdTourist  *  * @Param value pIdTourist New IdTourist.  */  /**  * Returns the value of voting  *  * @Return value of vote.  */  /**  * Sets the new value of voting  *  * New value * @param pRating to vote.  */
/**  * Returns the value of comment  *  * @Return value of comment.  */  /**  * Sets the new value of comment  *  * @Param value New pComment comment.  */  /**  * Returns the value of dataVisit  *  * @Return value dataVisit.  */  /**  * Sets the new value of dataVisit  *  * @Param value pDataVisit New dataVisit.  */  /**  * Returns the value of idRefreshmentPoint  *  * @Return value idRefreshmentPoint.  */  /**  * Sets the new value of idRefreshmentPoint  *  * @Param value pIdRefreshmentPoint New idRefreshmentPoint.  */  /**  * Returns the value of IdTourist  *  * @Return value IdTourist.  */  /**  * Sets the new value of IdTourist  *  * @Param value pIdTourist New IdTourist.  */  /**  * Returns the value of voting  *  * @Return value of vote.  */  /**  * Sets the new value of voting  *  * New value * @param pRating to vote.  */
/**  * This method returns the id of the cultural property for which you are viewing  * the Contact or changing data.  *  * @Return int - the id of the cultural property.  */  /**  * This method initializes the interface for display board A cultural object.  *  * @Return void  */  /**  * This method loads the data supplied to the constructor of the cultural In the  * form.  */  /**  * This method loads the statistics provided cultural Input to the constructor  * of the class.  */  /**  * This method shows or hides the label next to the suggestions Of the form.  */  /**  * This method makes the form editable or not.  */  /**  * This method initializes the toolbar tab of a cultural object.  *  * @Return javax.swing.JToolBar - the toolbar.  */  /**  * This method initializes the button to modify data of good Cultural.  *  * @Return javax.swing.JToggleButton - the button for the change.  */  /**  * This method initializes btnSave  *  * @Return javax.swing.JButton  */  /**  * This method initializes the button to clear the form (well again Culture) or  * reload the data of the cultural (change data).  *  * @Return javax.swing.JButton - the button above.  */  /**  * This method initializes the button to edit a comment.  *  * @Return javax.swing.JButton - the button to edit a comment.  */  /**  * This method initializes the format for the data of a cultural object.  *  * @Return javax.swing.JPanel - the form for the data.  */  /**  * This method initializes the statistics of a container panel Cultural.  *  * @Return javax.swing.JPanel - the panel statistics.  */  /**  * This method initializes the panel to display feedback Received from a  * cultural object.  *  * @Return javax.swing.JPanel - the panel of feedback.  */  /**  * This method initializes the panel of statistics for the current month.  *  * @Return javax.swing.JPanel - the panel of statistics for the current month.  */  /**  * This method initializes the panel on the total statistics The cultural  * property.  *  * @Return javax.swing.JPanel - the panel statistics totals.  */
/**  * Method called by the constructor  *  * @Return void  */   /**  * Method which initializes a jContentPane  *  * @Return javax.swing.JPanel  */  /**  * This method initializes the button (ToggleButton) the alteration Data for  * refreshmentPoint  *  * @Return javax.swing.JToggleButton  */  /**  * Method to initialize the Save button (btnSave)  *  * @Return javax.swing.JButton  */  /**  * Method to initialize the Cancel button (btnCancel)  *  * @Return javax.swing.JButton  */  /**  * Method to initialize the button for Changing a comment (btnModifyComment)  *  * @Return javax.swing.JButton  */  /**  * Create and initialize a JTabbedPane  *  * @Return javax.swing.JTabbedPane  */  /**  * Method to initialize a panel (dataPR)  *  * @Return javax.swing.JPanel  */  /**  * Method for iniziailizzare a panel (statistics)  *  * @Return javax.swing.JPanel  */  /**  * Method to initialize a panel (feedback)  *  * @Return javax.swing.JPanel  */  /**  * Initialize a JexField (addressPR)  *  * @Return javax.swing.JTextField  */  /**  * Method to initialize the type field address (addressPR) Or via, piazza ....  *  * @Return javax.swing.JComboBox  */  /**  * Initialize a JTextField for entering Uan city CityPR  *  * @Return javax.swing.JTextField  */  /**  * This method initializes locationPR  *  * @Return javax.swing.JComboBox  */  /**  * Code of refreshment. Definition capPR JTextField  *  * @Return javax.swing.JTextField  */  /**  * Creation JScrollPane  *  * @Return javax.swing.JScrollPane  */  /**  * Method to create JTextArea's whole descriptionPR  *  * @Return javax.swing.JTextArea  */  /**  * Method to create the JTextField phonePR  *  * @Return javax.swing.JTextField  */  /**  * method to initialize a JComboBox with the hours (scheduleAPOrePR)  *  * @Return javax.swing.JComboBox  */  /**  * Method to initialize a JComboBox with the minutes (scheduleApMinPR)  *  * @Return javax.swing.JComboBox  */  /**  * Method to initialize a JComboBox with the minutes (scheduleCHMinPR)  *  * @Return javax.swing.JComboBox  */  /**  * Create and initialize a jCombo Box with all the provinces (provPR)  *  * @Return javax.swing.JTextField  */  /**  * Initialization of a data point of the snack (namePR)  *  * @Return javax.swing.JTextField  */  /**  * Initialize and create a panel (JPanel)  *  * @Return javax.swing.JPanel  */  /**  * Creating a JScrollPane (jScrollPane2)  *  * @Return javax.swing.JScrollPane  */  /**  * Create a JTable (feedbackTable)  *  * @Return javax.swing.JTable  */  /**  * Creation of a panel (statisticMonthCurrent)  *  * @Return javax.swing.JPanel  */  /**  * Creation of a panel (statisticTotal)  *  * @Return javax.swing.JPanel  */  /**  * Method for creating a toolbar (ToolbarCardPR)  *  * @Return javax.swing.JToolBar  */  /**  * Method to initialize posGeoX The X position of the GPS  *  * @Return javax.swing.JTextField  */  /**  * Method to initialize posGeoY The Y position of the GPS  *  * @Return javax.swing.JTextField  */  /**  * Method to initialize posGeoZ The Z position of the GPS  *  * @Return javax.swing.JTextField  */  /**  * Method to initialize a JComboBox with the hours (scheduleCHOrePR)  *  * @Return javax.swing.JComboBox  */  /**  * Initialization and management position  *  * @Param integer pOffset  * @Param String pString  * @Param Attribute Pattra  */
/**  * Returns the name of the output category  */  /**  * Get the String as a parameter representing the term Of which you want to pick  * the values of frequency, range and bearing  */  /**  * Adds an end to dictionary category  */  /**  * add an end to dictionary category Seven also the values of frequency,  * distance and relevance  */  /**  * Set the values for the period pTerm  */   /**  * Returns True if the term is present in Dictionary of Category False otherwise  */
/**  * Static method for verifying correctness of a String  *  * @Param String to check pString  * @Param lettersAllowed Boolean: True if it is allowed to be present Letters  *        in the String, False otherwise  * @Param numbersAllowed Boolean: True if it is allowed to be present Numbers in  *        the String, False otherwise  * @param String charactersAllowed containing all characters Allowed in the String  * @Param String charactersNecessary all  characters Must be present  *        in the String  * @Param minCharacterNumber integer representing the minimum number of  *        Characters allowed in String  * @Param maxCharacterNumber integer representing the maximum number of  *        Characters allowed in String  * @Return Boolean: True if the witch meets the conditions, False Otherwise  */           /**  * Please formal control and consistency on the data of the banner Content in  * the bean passed by parameter.  *  * @Param pBanner bean contains the data of the banner.  * @Return True if the data of the banner is correct false otherwise.  */  /**  * Method which controls the image contained in the object ImageIcon past Per  * parameter.  *  * @Param image ImageIcon object containing the image to be checked  * @Return true if the image contained in the object is an instance ImageIcon  *         Class BufferedImage.  */  /**  * Function that checks the data in a news;  *  * @Param bean pNews containing details of a news.  * @Return  */
/**  * Please formal control and consistency on Data content of the banner in the  * bean passed by parameter.  * @Param pBanner bean contains the data of the  * banner.  */  /**  * Method that performs consistency checks and Correctness of the information  * contained in the bean past Per parameter, in particular check that the dates  * Publication and expiration of the news are consistent, Or that the second is  * the later.  *  * @Param pNews bean containing data news  * @Return Returns true if the bean  *        contains consistent data  */
/**  * Entry point of ControlServer  *  * @Param args The command line parameters  */
/**  * Update the current model of the table of cultural property with the bean Of  * the cultural supplied input.  *  * @Param pbc BeanCulturalHeritage - the bean with which to update the Model.  */  /**  * Closes the tab cultural selected.  *  * @Param pCard CardBC - the cultural card to close.  */  /**  * This method initializes the content pane of the frame.  *  * @Return javax.swing.JPanel - the content pane.  */  /**  * This method initializes the toolbar for features on Management of cultural  * heritage.  *  * @Return javax.swing.JToolBar - the toolbar for managing assets Cultural.  */  /**  * This method initializes the button to insert a new good Cultural.  *  * @Return javax.swing.JButton - the button for the insertion.  */  /**  * This method initializes the button to access to details of property Cultural  * selected.  *  * @Return javax.swing.JButton - the button for the card.  */  /**  * This method initializes the button to access the modifytion of a Cultural.  *  * @Return javax.swing.JButton - the button for the card.  */  /**  * This method initializes the button for the elimination of property Cultural  * selected.  *  * @Return javax.swing.JButton - the delete button for.  */  /**  * This method initializes the right side of the interface.  *  * @Return javax.swing.JPanel - the right pane of the interface.  */  /**  * This method initializes the panel for finding property Cultural.  *  * @Return javax.swing.JPanel - the search panel.  */  /**  * This method initializes the panel containing the online help.  *  * @Return javax.swing.JPanel - the panel of the guide.  */  /**  * This method initializes the bread and table scroll of cultural heritage.  *  * @Return javax.swing.JScrollPane - the scrollPane.  */  /**  * This method initializes the button to search for a good Cultural.  *  * @Return javax.swing.JButton - the search button.  */  /**  * This method initializes the button to clear the form Cultural research.  *  * @Return javax.swing.JButton - the button to reset the form.  */  /**  * This method opens a tab of the selected cultural or opens the Window for  * entering a new cultural object.  *  * @Param pbc BeanCulturalHeritage - the bean of the cultural property of which  *        Want to see the card.  * @Param boolean pModify --  *        <ul>  *        <li><i> True </ i> - indicates that you are making a change Data  *        cultural.<li> <i> False </ i> indicates that you are viewing the card  *        The cultural property.  */  /**  * This method imports the cultural downloaded from the server in Table.  *  * @Param boolean pSearch  *        <ul>  *        <li><i> True </ i> - include the search parameters.<li> <i> False </  *        i> otherwise. </ Ul>  */  /**  * This method loads the tags available in the system and import them into Panel  * tag.  */  /**  * This method sets the size of columns for the data assets Cultural.  */
/**  * Implements the method for the elimination of a cultural system.  *  * @See unisa.gps.etour.control.ManagerCulturalHeritage.IManagerCulturalHeritageAgency  *      # clearCulturalHeritage (int)  */  /**  * Implement the method for the insertion of a new cultural object.  *  * @See unisa.gps.etour.control.ManagerCulturalHeritage.IManagerCulturalHeritageAgency  *      # insertCulturalHeritage (unisa.gps.etour.bean.BeanCulturalHeritage)  */   /**  * Implement the method for changing a cultural asset in the system.  *  * @See unisa.gps.etour.control.ManagerCulturalHeritage.IManagerCulturalHeritageAgency  *      # modifyCulturalHeritage (unisa.gps.etour.bean.BeanCulturalHeritage)  */  /**  * Implements the method for adding a tag to a cultural object.  *  * @See unisa.gps.etour.control.ManagerCulturalHeritage.IManagerCulturalHeritageAgency  *      # addTagCulturalHeritage (int, int)  */  /**  * Implement the method for removing a tag from a cultural object.  *  * @See unisa.gps.etour.control.ManagerCulturalHeritage.IManagerCulturalHeritageAgency  *      # removeTagCulturalHeritage (int, int)  */
/**  * Please consistency check by calling the appropriate methods. This method  * wrappa "all other methods of control with a single call. At the first false  * value the flow is interrupted.  *  * @Param bean The PBC of the cultural object to be inspected @Return boolean  * The result of the check: true if OK, false otherwise  */  /**  * Check for null data in a bean cultural property. The check is performed on  * all fields of the bean.  *  * @Param bean The PBC cultural property to be checked  * @Return boolean The result of the check: true if there are no null references, false otherwise  */  /**  * Check the consistency of dates within this BeanCulturalHeritage. The check is  * performed only on objects, while not carried out No validity check 'on a date  * as a cultural object may also have Dates later than today (see for example on  * open exhibitions).  *  * @Param The PBC BeanCulturalHeritage which check the dates  * @Return boolean The result of the check: true if the dates have consistency; false otherwise  */  /**  * Check the ID of BeanCulturalHeritage  *  * @Param pId Id BeanCulturalHeritage be checked  * @Return boolean The result of the check: true if the ID is correct, false otherwise  */
/*      * Implements the method for obtaining a cultural object by Id      *      * @See      * unisa.gps.etour.control.ManagerCulturalHeritage.IManagerCulturalHeritageCommon #      * getCulturalHeritage (int)      */     /*      * Implement the method for changing a feedback on a cultural past Through Id      *      * @See      * unisa.gps.etour.control.ManagerCulturalHeritage.IManagerCulturalHeritageCommon #      * modifyFeedbackCulturalHeritage (int, unisa.gps.etour.bean.BeanVisitBC)      */
/**  * Please consistency check by calling the appropriate methods  *  * @Param bean The pVBC cultural visit to check  * @Return boolean The result of the check: true if OK, false otherwise  */  /**  * Check for null data in a bean cultural visit  *  * @Param bean The PBC cultural visit to check  * @Return boolean The result of the check: true if there are no null  *         references, false otherwise  */
/*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBOperatorAgency # getOperatorAgency      * (int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBOperatorAgency # modifyPassword      * (java.lang.String)      */

/**  * Method to get the connection to the server.  *  * @Return Returns the database connection  * @Throws SQLException  */
/*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBConvention # clearConvention (int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBConvention # getHistoricalConvention (int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBConvention # insertConvention      * (unisa.gps.etour.bean.BeanConvention)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBConvention # modifyConvention      * (unisa.gps.etour.bean.BeanConvention)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBConvention # getConvezioneActive      * (int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.repository.IDBConvention #      * getListConventionActivePR ()      */





/**  * Set the number of tests in progress  */







/**  * Manages the movement of JInternalFrame inside the area of JDesktopPane,  * preventing the frames are brought out of the visible area.  *  * @Param javax.swing.JComponent AComponent - the component of which Manage the  *        move.  * @Param int x - x cordinate the point where it was moved Component.  * @Param int y - y cordinate the point where it was moved Component.  */  /**  * Customize the action of reducing the JInternalFrame an icon, creating  * Clickable bars on the bottom of JDesktopPane.  *  * @Param JInternalFrame frame - a frame inside a JDesktopPane.  */  /**  * Restore the frame from the effect of minimizing, resetting the Position and  * size it had before.  *  * @Param javax.swing.JInternalFrame frame - a frame inside a JDesktopPane.  */  /**  * Return the focus to a selected frame, and, if the frame Is iconificato, the  * deiconifica.  *  * @Param JInternalFrame frame - a frame within a JDesktopPane  */  /**  * Center the frame supplied as a parameter in JDesktopPane.  *  * @Param javax.swing.JInternalFrame frame - a frame inside a JDesktopPane.  * @Return void  */  /**  * Redraw the frames in the desktop iconificati bread provided.  *  * @Param javax.swing.JDesktopPane Desk - a desktop bread associated with a Desk  *        manager.  * @Throws IllegalArgumentException - was supplied as a parameter JDesktopPane  *         which is not associated with a Desk Manager.  */  /**  * Redraw (and resize if necessary) all the frames contained in a Since  * JDesktopPane.  *  * @Param javax.swing.JDesktopPane Desk - a desktop pane.  * @Throws IllegalArgumentException - if the desktop bread supply is not  *         Associated with a desktop manager like DeskManager.  */  /**  * Open a frame of the class specified using the display Waterfall. If you  * already have a frame of classes given, the frame is Activated.  *  * @Param class class - a class type that extends JInternalFrame.  * @Param javax.swing.JDesktopPane Desk - a desktop pane.  * @Throws IllegalArgumentException - The class provided is not a  *         JInternalFrame.  */  /**  * Displays a popup menu with options for frames of a desktop bread The selected  * location.  *  * @Param java.awt.Point Pointe - the point where to place the menu.  * @Param javax.swing.JDesktopPane desk - a JDesktopPane which &grave; an  *        associated Instance of DeskManager.  * @Throws IllegalArgumentException - &grave; was provided as a parameter  *         JDesktopPane that &grave; not associated with a Desk Manager.  */  /**  * Deiconifica all frames previously iconificati.  */  /**  * Minimize all frames of a JDesktopPane provided in &grave; an associated  * DeskManager.  *  * @Param JDesktopPane Desk - a desktop pane.  * @Throws IllegalArgumentException - &grave; was provided as a parameter  *         JDesktopPane that &grave; not associated with a Desk Manager.  */  /**  * Close all frames in a given JDesktopPane.  *  * @Param javax.swing.JDesktopPane Desk - a desktop &grave; bread in an  *        associated DeskManager.  * @Throws IllegalArgumentException - &grave; was provided as a parameter  *         JDesktopPane that &grave; not associated with a Desk Manager.  */  /**  * Initialize the DeskMenu.  */

/**  * Returns the number of columns provided by the model.  *  * @Return int - the number of columns.  */  /**  * Returns the number of rows currently in the model.  *  * @Return int - the number of rows.  */  /**  * Returns the column name from the index provided.  *  * @Return String - the name of the column.  * @Exception IllegalArgumentException - if the column index is not provided In  *            the model.  */  /**  * Returns the object in the model to the row and column provided.  *  * @Param pRow - the line number.  * @Param pColumn - the column number.  * @Return Object - the object contained in the selected cell.  */  /**  * Returns the class of objects in the column of which is provided in the index.  *  * @Param pColumn - the column number.  * @Return Class - the class of objects of the selected column.  * @Exception IllegalArgumentException - if the index column does not pro In the  *            model.  */  /**  * Returns whether the selected cell editable.  *  * @Return boolean - true if the cell editable False otherwise  * @Param pRow - the line number.  * @Param pColumn - the column number.  * @Exception IllegalArgumentException - if the index or the row or column are  *            not provided In the model.  */  /**  * The method is inherited by setValueAt TableModel does not need to  * SitoTableModel Because it provided the possibility to change a single cell.  *  * @Deprecated  */  /**  * Enter data on the feedback received from a cultural In the model from Bean.  *  * @Param BeanVisitBC PBC - the bean that contains the feedback from Cultural.  * @Throws IllegalArgumentException - if the parameters supplied input not Are  *         valid.  */  /**  * Enter data on the feedback received from a refreshment In the model from  * Bean.  *  * @Param BeanVisitPR PBC - the bean that contains the feedback from  *        Refreshment.  * @Throws IllegalArgumentException - if the parameters supplied input not Are  *         valid.  */  /**  * Updates the comment feedback contained in the table row selected.  *  * PNewComment  * @param String - the new comment.  * @Param pRow - the row to update.  * @Throws IllegalArgumentException - if  *         <ul>  *         <li>the row index is not present in the model.  *         <li>New comment supplied input is zero. </**  */  /**  * Returns the id of the row receive feedback provided on input.  *  * @Param pRow int - the row number.  * @Return int [] - the id of the feedback.  * @Throws IllegalArgumentException - if the row index does not pro In the  *         model.  */  /**  * Returns the id of feedback to line number provided as input and removes it  * from the model.  *  * @Param pRow int - the row number.  * @Return int [] - the id of the feedback.  * @Exception IllegalArgumentException - if the row index does not pro In the  *            model.  */
/**  * Method for calculating the relevance of a term.  *  * @Param distance: Contains the distance of the term from category analyzed  * @Param pMaxDist: Contains  maximum distance of all terms in all categories.  * @Return Returns the relevance of the term in the category.  */  /**  * Method for calculating the distance between a term and a category  *  * @Param pTerms: Contains the period analyzed  * @Param pTotTerms: Tables of the total frequency of terms.  * @Param textFrequency: Table of the terms of the text analyzed.  * @Param pCategory: Category analyzed.  * @Return Returns  * the distance of the term pTerms by category PCategoria  */  /**  * Method for calculating the distance of a term from one category. Used for  * training  *  * @Param pTerms period to analyze  * @Param pCategory category from which you  * must calculate the distance  * @Param table pTotTerms total time  * @Return Returns the distance of a term from one category  */  /**  * Implementation of a function T-Norm  *  * @Param a first value  * @Param b the second value  * @Return returns the value calculated using a function T-Norm  */  /**  * Implementation of a function S-Norm  *  * @Param a first value  * @Param b the second value  * @Return returns the value calculated using a function S-Norm  */  /**  * Calculation of similarity between a category and a given text input  *  * @Param table pTerm worded. It must contain to  term values of  * importance and belonging situated in Vector float in positions 1 and 2.  * @Return returns a numeric value that indicates the similarity of a Text with  * the category on which one has calculated the values of Importance and  * belonging  */  /**  * Method for the calculation of membership of a text to a category  *  * @Param val indicates the similarity of a text with a category  * @Param maxSimilarity indicates the maximum similarity found  * @Return a value in the interval [0,1] that indicates the degree of Membership of the  * text to the category x  */  /**  * Method to delete a tense special characters and to bring all uppercase to  * lowercase  *  * @Param pStr transform  * @Return the text to lowercase  * characters and no special  */  /**  * Method of retrieving the category you belong to a text  *  * @Param pDescription text to analyze  * @return a String indicating the  * category @Throws RemoteException  */  /**  * Method to find the category with which the text has the highest degree of  * Membership  *  * @Param pTextCategory table of categories to the text  * @return a String indicating the name of the category with which The text has the  * highest degree of membership  */  /**  * Method used to check whether a term is presented in table The terms of the  * text  *  * @Param pStr period to analyze @Param pTable tables in terms of the text  * @Return returns true if the term exists false otherwise  */  /**  * Method used to retrieve the knowledge base  *  * @return an object representing the type ElencoCategorie  * KnowledgeBase  */  /**  * Method used to create the file. Used in training  *  * @Param path String indicating the path in which to create the file  * @Return an ObjectOutputStream to the file created  */  /**  * Method used to create the knowledge base  */

/**  * This method handles the event when the pointer should Mouse enters the  * component.  *  * @Param pMouseEnteredEvent MouseEvent - The event generated by the mouse.  */
/**  * Method that inserts a new news system.  *  * @Param pNews Bean containing data news  * @Throws RemoteException  */  /**  * Method which removes from the news system.  *  * @Param ID pNewsID news be erased.  * @Throws RemoteException  */  /**  * Method amending the text of a news.  *  * @Param pNews Bean containing data news  * @Throws RemoteException  */  /**  * Returns the list of active news.  *  * @Return ArrayList of ArrayList News  * @Throws RemoteException  */
/**  * Inserts a new banner.  *  * @Param pBanner Bean contains the data of the banner  * @Throws RemoteException  */  /**  * Delete a banner from the system.  *  * @Param pBannerID ID banner to be deleted.  * @Return true if the operation is successful false otherwise.  * @Throws RemoteException  */  /**  * Modify the data of the banner or the image associated.  *  * @Param pBanner Bean contains the data of the banner.  * @Return true if the operation is successful, false otherwise.  * @Throws RemoteException  */  /**  * Returns a list of Banner of a particular point of comfort.  *  * @Param Id pRefreshmentPointID of refreshment owner of banner  * @Return ArrayList containing the list of banner refreshment  * @Throws RemoteException  */

/**  * Method to authenticate a registered user (Tourist - Operator Refreshment)  *  * Username  * @param pUserName on a Registered User  *  * @Param password for pPassword Registered User  * @Param type pUsertype user is authenticated  * @Return If the data are correct user ID logged in the event Otherwise -1 *  */
/**  * Method for the insertion of a new cultural  *  * @Param pCulturalHeritage The raw bean to be included in the database  * @Return boolean The result of the operation; true if was successful, false  *         otherwise  */  /**  * Method for the clearing of a cultural object by id  *  * @Param Id pCulturalHeritageID the bean to be deleted  * @Return boolean The result of the operation; true if was successful, false  *         otherwise  */  /**  * Method for the return of all cultural property in the Database  *  * @Return ArrayList all the beans in the database  */  /**  * Method for updatang (or change) the data of a cultural  *  * @Param pCulturalHeritage The bean with the new information of the cultural  * @Return boolean The result of the operation; true if was successful, false  *         otherwise  */  /**  * Method for setting a tag to a certain cultural  *  * @Param pCulturalHeritageID The identifier of the cultural object to which to add  *        a tag  * @Param pTagID The ID tag to add to the cultural indicated  * @Return boolean The result of the operation; true if was successful, false  *         otherwise  */  /**  * Method for removing a tag from a certain cultural To ensure that 'the  * operation is successful it is necessary that the cultural property has  * Actually set the specified tag  *  * @Param pCulturalHeritageID The identifier of the cultural object from which to  *        remove the tag  * @Param pTagID The ID tag to be removed from the cultural indicated  * @Return boolean The result of the operation; true if was successful, false  *         otherwise  */
/**  * Method to return a particular Cultural Heritage  *  * @Param pCulturalHeritageID The identifier of the cultural property to be  *        returned  * @Return BeanCulturalHeritage Contains data required of Cultural Heritage  */  /**  * Returns the list of tags of a cultural  *  * @Param ID pCulturalHeritageID of Cultural Heritage  * @Return ArrayList of the cultural <BeanTag> tags specified  */  /**  * Returns a list of feedback to the cultural specified  *  * @Param ID pCulturalHeritageID of Cultural Heritage  * @Return HashMap <BeanVisitBC, String> The feedback of Cultural Heritage  */  /**  * Returns for the cultural property specified, an array where each position  * contains the number of Feedback corresponding to the value of the array more  * than 'one. The calculation and 'made in the period between 30 days and today.  *  * @Param ID pCulturalHeritageID of Cultural Heritage  * @Return ArrayList <Integer> The statistics of last thirty days  */  /**  * Method for updatang (or modifytion) of a feedback for a certain good  * Cultural. The method has the burden of  *  * @Param pCulturalHeritageID The identifier of the cultural change which the  *        feedback  * @Param pBeanVisitBC The new feedback to the cultural indicated  * @Return boolean The result of the operation; true if was successful, false  *         otherwise  */
/**  * Returns the data Operator Agency with ID equal to that given in  * Input  *  * @Param pUsername Username dell'OperatorAgency to find  * @Return OperatorAGenzia with id equal to the input, null if there is  */  /**  * Returns the data Operator Agency with ID equal to that given in  * Input  *  * @Param pUsername Username dell'OperatorAgency to find  * @Return OperatorAGenzia with id equal to the input, null if there is  */
/**  * Add a banner in the database  *  * @Param pBanner bean containing the information of the banner  */  /**  * Modify the contents of the advertisement, and returns the contents before  * Edit  *  * @Param pBanner Bean that contains the new information of the banner  * @Return True if there 'was a modified false otherwise  */  /**  * Delete a banner from the database and returns  *  * @Param pIdBanner ID BeanBanner  * @Return True if and 'was deleted false otherwise  */  /**  * Returns a list of banners for a refreshment point, if the id of Refreshment  * and 'equal to -1 will' return the complete list Banners  *  * @Param Id pIdRefreshmentPoint of refreshment point from which to obtain the  *        list Banner  * @Return list of banners linked to Refreshment  */  /**  * Method which returns a banner given its id  *  * @Param ID pIdBanner the banner to return  * @Return Banner found in the database, null if there is' match  */
/**  * Add a convention in the database  *  * @Param pConvention Convention by adding  */  /**  * Modify a convention in the database  *  * @Param data pConvention Convention of the Convention to be updated  * @Return True if there 'was a modified false otherwise  */  /**  * Delete an agreement by the database  *  * @Param pIdConvention ID of the Convention by removing  * @Return True if been deleted false otherwise  */  /**  * Returns the historical conventions of a refreshment  *  * @Param idRefreshmentPoint point identification Refreshments  * @Return List of conventions of Refreshment given as argument  */  /**  * Returns the Convention active a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshments  * @Return Convention Turns  * @Throws SQLException  */  /**  * Returns a list of all the PR that have a Convention active  *  * @Return list of all the PR with the Convention active  */
/**  * Add a cultural heritage, given input  *  * @Param pBene Cultural Heritage for inclusion in database  */  /**  * Modify the information in the cultural  *  * @Param pBene contains the information to modify the database  * @Return True if there 'was a modified false otherwise  */  /**  * Delete a cultural object from the database  *  * @Param ID pIdBene cultural property to delete  * @Return True if and 'was deleted false otherwise  */  /**  * Returns the cultural object with id as input  *  * @Param pId cultural property to be extracted from the database  * @Return cultural property obtained from the database  */  /**  * Research. Returns the list of cultural property in their name or Description  * given String as input, filtered according to tags and Maximum distance. The  * returned list contains the number of goods given as input. To browse the real  * list, which may contain more 'of Ten elements, you use the paramtro  * numPage.  *  * PKeyword  * @param String that contains the keyword to search the Name or description of the cultural  *  * @Param pTags list of tags used to filter the search. the Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored.  * @Param pNumPage The page number you want to view. O for 1 page (the first  *        10 results), 1 for 2 page (s Results from 11 to 20) etc ...  * @Param pPosition position of the person who carried out the research  * @Param pMaxDistance Maximum distance from the user to search for good  * @Param pNumberElementsPerPage number of items to return per page  * @Throws SQLException  * @Return list contained ten cultural  */  /**  * Advanced Search. Returns the list of cultural goods which have in Name or  * description given String as input, sorted according to Preferences of  * tourists and filtered according to the tag and the maximum distance. The  * Returned list contains the number of goods given as input. To scroll The  * actual list, which may contain multiple 'items, you Use paramtro numPage.  *  * @Param ID pIdTourist tourists who carried out the research PKeyword * @param  *        String that contains the keyword to search the Name or description of  *        the cultural  * @Param pTags list of tags used to filter the search. the Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored.  * @Param pNumPage The page number you want to view. O for 1 page (the first  *        10 results), 1 for 2 page (s Results from 11 to 20) etc ...  * @Param pPosition position of the person who carried out the research  * @Param pMaxDistance Maximum distance from the user to search for good  * @Param pNumberElementsPerPage number of items to return per page  * @Throws SQLException  * @Return list contained ten cultural  */  /**  * Method to get the number of elements to search.  *  * PKeyword * @param String that contains the keyword to search the Name or  * description of the cultural  *  * @Param pTags list of tags used to filter the search. the Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored.  * @Param pPosition position of the person who carried out the research  * @Param pMaxDistance Maximum distance from the user to search for good  * @Throws SQLException  * @Return number of pages.  */  /**  * Method to get the number of elements to search.  *  * @Param identifier pIdTourist tourists who carried out the research PKeyword  *        * @param String that contains the keyword to search the Name or  *        description of the cultural  * @Param pTags list of tags used to filter the search. the Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored.  * @Param pPosition position of the person who carried out the research  * @Param pMaxDistance Maximum distance from the user to search for good  * @Throws SQLException  * @Return number of pages.  */  /**  * Returns a list of all cultural  *  * @Throws SQLException  * @Return List of all cultural  */
/**  * Add a dish  *  * @Param pDish plate add  */  /**  * Modify the data in a flat in the database  *  * @Param pPiatti data plate to be inserted in database  * @Return True if there 'was a modified false otherwise  */  /**  * Delete a dish from the database  *  * @Param pIdDish ID plate eliminre  * @Throws SQLException  * @Return True if and 'was deleted false otherwise  */  /**  * Returns a list of dishes on a menu  *  * @Param ID pIdMenu menu  * @Throws SQLException  * @Return list of dishes in the menu  */
/**  * Add a preference General  *  * @Param pPreference preference to be added  */  /**  * Edit a general preference  *  * @Param pPreference preference to change  * @Return True if and 'been changed otherwise false  */  /**  * Delete a general preference  *  * @Param ID pIdPreference preference to delete  * @Return True if and 'have been deleted false otherwise  */  /**  * Returns the generic preference for tourists  *  * @Param Id pIdTourist tourists  * @Return generic preference  */
/**  * Adds a menu in the database  *  * @Param pMenu menu to add  */  /**  * Modify a menu in the database  *  * @Param pMenu Contains the data to change  * @Return True if there 'was a modified false otherwise  */  /**  * Delete a menu from database  *  * @Param ID pIdMenu menu to delete  * @Return True if and 'was deleted false otherwise  */  /**  * Returns the menu of the day of a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshments  * @Param pDay Day of the week in which the menu Daily  * @Return Day menu de Refreshment  */  /**  * Returns a list of the menu of a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshment  * @Return List of menus  */
/**  * Add a news database  *  * @Param pNews News to add  */  /**  * Modify a news database  *  * @Param pNews News to change with the new data  * @Return True if there 'was a modified false otherwise  */  /**  * Delete a database from news  *  * @Param ID pIdNews News to eliminate  * @Return True if and 'have been deleted false otherwise  */  /**  * Returns the active news  *  * @Return list of active news  */
/**  * Add a refreshment  *  * @Param pRefreshmentPoint Refreshment to add  */  /**  * Modify a refreshment  *  * @Param pRefreshmentPoint Refreshment to edit  * @Return True if and 'been changed otherwise false  */  /**  * Delete a refreshment  *  * @Param ID pIdRefreshmentPoint Refreshment to eliminate  * @Return True if and 'have been deleted false otherwise  */  /**  * Returns data from a point of comfort with the ID given as argument  *  * @Param pId point identification Refreshments  * @Return Refreshment  */  /**  * Advanced Search. Returns the list of eateries that have in Name or  * description given String as input, sorted according to Preferences of  * tourists, the tags and filtered according to the distance Max. The list  * returned contains only the number of catering outlets input data. To scroll  * the real list, which may contain multiple 'items, you Use paramtro numPage.  *  * @Param Id pIdTourist tourists who carried out the research PKeyword * @param  *        String that contains the keyword to search the Name or description of  *        refreshment  * @Param pTags list of tags used to filter the search. the Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored.  * @Param pNumberPage The page number you want to view. O The 1 page (the  *        first 10 results), 1 for 2 page (s Results from 11 to 20) etc ... *  * @Param pPosition position of the person who carried out the research  * @Param int Number of elements to return pNumberElementsPerPage  * @Param pMaxDistance Maximum distance from the user to refreshment To seek  * @Return list containing ten points Refreshments  */  /**  * Method to get the number of elements to search.  *  * @See searchAdvanced ()  * @Param Id pIdTourist tourists who carried out the research PKeyword  * @param  *        String that contains the keyword to search the Name or description of  *        refreshment  * @Param pTags list of tags used to filter the search. the Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored. *  * @Param pPosition position of the person who carried out the research  * @Param pMaxDistance Maximum distance from the user to refreshment To seek  * @Return number of pages.  */  /**  * Research. Returns the list of eateries that have the name or Description  * given String as input, filtered and tags According to the maximum distance.  * The returned list contains the number of Points Refreshments input data. To  * scroll the real list, which May contain more 'items, you use the paramtro  * NumPage.  *  * PKeyword  * @param String that contains the keyword to search the Name or  * description of refreshment  *  * @Param pTags list of tags used to filter the search. the Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored.  * @Param pNumberPage The page number you want to view. O The 1 page (the  *        first 10 results), 1 for 2 page (s Results from 11 to 20) etc ... *  * @Param pPosition position of the person who carried out the research  * @Param pMaxDistance Maximum distance from the user to refreshment  * @Param int Number of elements to return pNumberElementsPerPage  * @Return list containing ten points Refreshments  */  /**  * Method to get you the elements for an advanced search.  *  * @See search ()  * @Param username pUsernameTourist tourists who carried out the research  *        PKeyword * @param String that contains the keyword to search the Name  *        or description of refreshment  * @Param pTags list of tags used to filter the search. The Maximum number of  *        tags to be included should not exceed five Units'. If you exceed this  *        number the other tags Excess will be ignored.  * @Param pPosition position of the person who carried out the research  * @Param pMaxDistance Maximum distance from the user to refreshment To seek  * @Throws SQLException  * @Return number of pages.  */  /**  * Returns a list of all the refreshment  *  * @Throws SQLException  * @Return list of all the refreshment  */
/**  * Adds an operator refreshment  *  * @Param pOperator Additional operating  */  /**  * Modify an operator in the database  *  * @Param pOperator New data Operator  * @Return True if there 'was a modified false otherwise  */  /**  * Delete an operator  *  * @Param pIdOperator Operator ID to delete  * @Throws SQLException  * @Return True if and 'was deleted false otherwise  */  /**  * Returns data operator  *  * @Param pIdOperator Operation ID  * @Throws SQLException  * @Return Operator refreshment  */
/**  * Add a preference of Search  *  * @Param pPreference Search Preferences  */  /**  * Delete a preference for research  *  * @Param pPreference preference to eliminate  * @Return True if and 'have been deleted false otherwise  */  /**  * Returns the list of preferences to find a tourist  *  * @Param Id pIdTourist tourists  * @Return List Search Preferences  */  /**  * Returns the list of preferences for research of a cultural  *  * @Param pIdCulturalHeritage ID of the cultural  * @Return list search preferences.  */  /**  * Returns the list of preferences to find a resting spot  *  * @Param identifier pIdRefreshmentPoint a refreshment  * @Return list search preferences.  */  /**  * Add a preference for a cultural  *  * @Param pIdCulturalHeritage ID of the cultural  * @Param pIdSearchPreference ID SearchPreference  * @Param pPreference Search Preferences  */  /**  * Add a search preference to a tourist  *  * @Param Id pIdTourist tourists  * @Param pIdSearchPreference ID SearchPreference  * @Param pPreference Search Preferences  */  /**  * Add a preference research to a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshments  * @Param pIdSearchPreference ID SearchPreference  * @Param pPreference Search Preferences  */  /**  * Deletes a preference to find a Tourist  *  * @Param Id pIdTourist tourists  * @Param pIdPreference Search Preferences  * @Return True if and 'have been deleted false otherwise  */  /**  * Deletes a preference for research of a cultural  *  * @Param pIdSearchPreference Search Preferences  * @Param pIdCulturalHeritage ID of the cultural  * @Return True if and 'have been deleted false otherwise  */  /**  * Deletes a preference to find a resting spot  *  * @Param pIdPreference Search Preferences  * @Param pIdRefreshmentPoint point identification Refreshments  * @Throws SQLException  * @Return True if and 'have been deleted false otherwise  */  /**  * Returns a list of all search preferences in the DB  *  * @Throws SQLException  * @Return List of search preferences in the DB  */
/**  * Add a tag  *  * @Param pTag Tag to add  * @Throws SQLException  */  /**  * Modify the data in a tag  *  * @Param pTag Tag to modify  * @Return True if and 'been changed otherwise false  */  /**  * Delete a tag from the database  *  * @Param pIdTag ID Tag to be deleted  * @Return True if and 'was deleted false otherwise  */  /**  * Returns the list of tags in the database  *  * @Return List containing the tags  */  /**  * Returns a single tag  *  * @Param pId ID tag  * @Return Tags  */  /**  * Tag with immovable cultural  *  * @Param ID pIdCulturalHeritage of Cultural Heritage  * @Param pIdTag ID tag  */  /**  * Tag to a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshments  * @Param pIdTag ID tag  */  /**  * Returns the list of tags of a cultural  *  * @Param ID pIdCulturalHeritage of Cultural Heritage  * @Return list of tags  */  /**  * Returns a list of tags of a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshments  * @Return list of tags  */  /**  * Delete a tag to a cultural  *  * @Param ID pIdCulturalHeritage of Cultural Heritage  * @Param pIdTag ID tag  * @Return True if and 'was deleted false otherwise  */  /**  * Delete a tag to a refreshment  *  * @Param pIdRefreshmentPoint ID  * @Param pIdTag ID tag  * @Return True if and 'was deleted false otherwise  */
/**  * Add a tourist  *  * @Param to add pTourist Tourist  */  /**  * Modify a tourist  *  * @Param to change pTourist Tourist  * @Return True if and 'been changed otherwise false  */  /**  * Delete a tourist from the database  *  * @Param pIdTourist Identificatie Tourist delete  * @Return True if and 'been changed otherwise false  */  /**  * Returns the data of the Tourist  *  * @Param pUsername Username tourists  * @Return Information about tourist  */  /**  * Attach a cultural tourists preferred  *  * @Param ID pIdTourist tourists  * @Param pIdCulturalHeritage ID of the cultural  */  /**  * Attach a point of catering to the tourist favorite  *  * @Param ID pIdTourist tourists  * @Param pIdRefreshmentPoint ID of the cultural  */  /**  * Delete a cultural favorite  *  * @Param ID pIdTourist tourists  * @Param pIdCulturalHeritage ID of the cultural  * @Return True if and 'been changed otherwise false  */  /**  * Delete a favorite resting spot  *  * @Param ID pIdTourist tourists  * @Param pIdRefreshmentPoint ID of the cultural  * @Return True if and 'was deleted false otherwise  */  /**  * Returns an ArrayList of tourists who have a username like that Given as  * argument  *  * @Param pUsernameTourist Usrername tourists to search  * @Return data for Tourists  */  /**  * Returns the list of tourists turned on or off  *  * @Param select pact True False those tourists turned off  * @Return data for Tourists  */  /**  * Returns the data of the tourist with ID equal to that given in Input  *  * @Param ID pIdTourist tourists to find  * @Return Tourists with id equal to the input, null if there is  */  /**  * Returns the list of cultural favorites from a particular Tourist  *  * @Param ID pIdTourist tourists to find  * @Return List of Cultural Heritage Favorites  */  /**  * Returns a list of favorite resting spot by a particular Tourist  *  * @Param ID pIdTourist tourists to find  * @Return List of Refreshment Favorites  */
/**  * Inserts a visit  *  * @Param PVIS Visit to insert  */  /**  * Modify a visit  *  * @Param PVIS Visit to edit  * @Return True if and 'been changed otherwise false  */  /**  * Extract the list of visits to a cultural  *  * @Param pIdCulturalHeritage ID of the cultural  * @Return list of visits of the cultural  */  /**  * Extract the list of cultural visited by a tourist  *  * @Param ID pIdTourist tourists  * @Return ArrayList of all feedback issued by a tourist for a Specified  *         cultural  */  /**  * Extract a visit by a tourist to a cultural  *  * @Param pIdCulturalHeritage ID of the cultural  * @Param ID pIdTourist tourists  * @Return visit  */
/**  * Add a visit to a refreshment  *  * @Param PVIS visit to add  */  /**  * Modify a visit  *  * @Param PVIS Visit to edit  * @Return True if and 'been changed otherwise false  */  /**  * Extract the list of visits to a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshments  * @Return List of visits  */  /**  * Extract a visit by a tourist at a refreshment  *  * @Param pIdRefreshmentPoint point identification Refreshments  * @Param ID pIdTourist tourists  * @Return visit  */  /**  * Extract the list of visits of a tourist  *  * @Param ID pIdTourist tourists  * @Return List of visits  */
/**  * Method for inserting a new Refreshment  *  * @Param pRefreshmentPoint containing all the data from the Refreshment Add  */  /**  * Method for deleting a refreshment bar with ID  *  * @Param pIDRefreshmentPoint for the unique identification of point Refreshments  */  /**  * Method to return all the refreshment of the DataBase  *  * @Return ArrayList containing all the beans of the present Refreshments In the  *         DataBase  */  /**  * Method to return all the refreshment with convention Active or not  *  * @Param Boolean statusConvention for the type of eateries by Get (contracted  *        or not)  * @Return ArrayList containing all the beans of the present Refreshments In the  *         database depending on the status of the Convention  */  /**  * Method for inserting a new convention for a certain point Refreshments  *  * @Param pRefreshmentPointID integer that uniquely identifies the point  *        Refreshments  * @Param pConv Convention that will enable (Parameter ID Refreshment create  *        redundancy but is useful for security Data)  * @Return boolean for confirmation of operation  */  /**  * Method to get all the feedback associated to a certain point Refreshments  *  * @Param pRefreshmentPointID unique identifier of the Refreshment To get feedback  * @Return HashMap containing the bean as the key value of feedback and how The  *         tourist who issued the feedback  */  /**  * Method for updatang (or change) the data of a Refreshment  *  * @Param pRefreshmentPointID for the unique identification of point Refreshments  *        to be amended  * @Param pRefreshmentPointupdated containing the new data to be saved  * @Return Boolean value-true if the operation went successfully, False  *         otherwise  */  /**  * Method which allows you to insert a tag to search for a useful point  * Refreshments  *  * @Param pRefreshmentPointId unique identifier of Refreshment  * @Param pTagId unique ID tags to be inserted  * @Return Boolean value-true if the operation went successfully, False  *         otherwise  */  /**  * Method which allows you to delete a tag to search for a useful point  * Refreshments  *  * @Param pRefreshmentPointId unique identifier of Refreshment  * @Param pTagId unique ID tags to be inserted  * @Return Boolean value-true if the operation went successfully, False  *         otherwise  */
/**  * Method to return a particular Refreshment  *  * @Param pRefreshmentPointID to identify the Refreshment from Return  * @Return Bean contains the data of Refreshment concerned  */  /**  * Method which returns the tags to some refreshment  *  * @Param pRefreshmentPointID point identification Refreshment  * @Return structure containing all BeanTag associated with the point  *         Refreshments passed as parameter  */  /**  * Method which returns the last 10 comments made for a Refreshment  *  * @Param pRefreshmentPointID ID for the point of rest in Question  * @Return Array of strings containing 10 items  */  /**  * Returns for the Refreshment specified, an array where each Location contains  * the number of ratings corresponding to the value Index of the array more  * 'one. The calculation and 'made in the period 30 days and today.  *  * @Param pRefreshmentPointID unique identifier of Refreshment  * @Return ArrayList containing the counters as explained above  */  /**  * Method which allows you to change the comment issued for a Refreshment  *  * @Param pRefreshmentPointId unique identifier of Refreshment  * @Param nuovaVisit Bean containing new comment  * @Return Boolean value-true if the operation went successfully, False  *         otherwise  */
/**  * Initialization method for research  *  * @Param pIdTourist ID of the tourist. Pass -1 in case of a Guest  * @Param pKeyword Together keyword search Together * @param pTagsId Search  *        Tags  * @Param pMaxRadius Maximum distance between the user and the site  * @Param numberElementsPerPage number of items to look for in a Search  *        session  * @Param pUserPosition detected by the GPS user position  * @Param type pSiteType site search  * @Return number of elements emerged from the research. On error Returns -1  */  /**  * Method for returning the list of emerging from the Cultural Heritage  * Research, in a given interval  *  * @Param pPage range of items to be included in the results  * @Return entirety of cultural property related to the range of results  *         Selected search. In case of error returns null  */  /**  * Method to return the list of eateries have emerged from Research related to a  * specific inteval  *  * @Param pPage range of items to be included in the results  * @Return set of points relating to the range of refreshment Selected search  *         results. In case of error returns null  * @Throws RemoteException Exception Remote  */  /**  * Method for returning the number of elements results from Search  *  * @Return number of elements emerged in the research phase. Where no Is  *         initialized the search returns -1  */  /**  * Method for returning the number of pages appear in results  *  * @Return number of pages that have emerged in the research phase. Where no Is  *         initialized the search returns -1  */
/**  * Method to insert a new tag  *  * @Param pTagNew containing all the data of the new Tag  * @Return Boolean: true if the operation is successful, false otherwise  */  /**  * Method for the clearing of an existing tag  *  * @Param pTagID to identify the tags in question  * @Return Boolean: true if the operation is successful, false otherwise  */  /**  * Method for editing a Tag  *  * @Param pTagChanged containing the details of the new Tag  * @Return Boolean: true if the operation is successful, false otherwise  */  /**  * Method which returns a tag identified by its ID  *  * @Param pTagID to identify a particular tag  * @Return a BeanTag containing data Tag concerned  */
/**  * Method which returns all the tags stored in the database  *  * @Return an ArrayList of BeanTag @Throws RemoteException Exception Remote  */
/**  * Method for the clearing of a tourist from the Database  *  * @Param pIdTourist Identifier Tourist delete  * @Return Boolean: true if the operation is successful, false otherwise  */  /**  * Method to activate a registered tourists  *  * @Param pIdTourist ID to activate the Tourist  * @Return Boolean: true if the operation is successful, false otherwise  */  /**  * Method to disable an active tourists  *  * @Param to disable pIdTourist Identifier Tourist  * @Return Boolean: true if the operation is successful, false otherwise  */  /**  * Method to obtain a collection of Tourists  *  * @Return ArrayList of BeanTourist  */  /**  * Method to obtain a collection of active tourists or not  *  * @Param boolean statusAccount Tourists can choose On whether  * @Return ArrayList of BeanTourist  */  /**  * Method to get all the feedback issued by a tourist for the points  * Refreshments  *  * @Param pIdTourist ID to pick up the tourists in Feedback  * @Return ArrayList containing all the beans Feedback released  * @Throws RemoteException Exception Remote  */  /**  * Method to get all the feedback issued by a tourist for Heritage Cultural  *  * @Param pIdTourist ID to pick up the tourists in Feedback  * @Return ArrayList containing all the beans Feedback released  * @Throws RemoteException Exception Remote  */
/**  * Method for the insertion of a Tourist  *  * @Param pTourist container for all data relating to tourism by Insert  * @Return Boolean: True if the insertion is successful, False otherwise  */  /**  * Method for including the General Preferences Tourist  *  * @Param pIdTourist Identifier Tourist which involve General Preferences  * @Param pGenericPreference General Preferences for inclusion  * @Return Boolean: True if the insertion is successful, False otherwise  */  /**  * Method for the extraction Preferences generously given Tourists  *  * @Param pIdTourist Identifier Tourist which you want Get the General  *        Preferences  * @Return Preferences General information relating to tourism  */  /**  * Method for changing the Preferences generously given Tourists  *  * @Param ID pIdTourist of tourists for whom you want Change the General  *        Preferences  * @Param pGenericPreferenceNew The Prefereferze General for inclusion  * @Param pGenericPreferenceVecchie Preferences generous to replace  * @Return Boolean: True if the modify successful, False otherwise  */  /**  * Method for the removal of preferences associated with the General Tourist  *  * @Param ID pIdTourist of tourists for whom you want Delete the General  *        Preferences  * @Return Preferences General erased  */  /**  * Method to insert a Search Preferences  *  * @Param ID pIdTourist of tourists for which you intend Insert a Search  *        Preferences  * @Param pSearchPreference Search Preferences be included  * @Return Boolean: True if the insertion is successful, False otherwise  */  /**  * Method for extracting the set of Search Preferences given Tourist  *  * @Param ID pIdTourist of tourists for whom you want Extract search preferences  *        Together  * @return the search preferences associated with the Tourist  *        information  */  /**  * Method for deleting a Search Preference given its ID and Tourists  *  * @Param ID pIdTourist of tourists for whom you want Delete a Search  *        Preferences  * @Param ID pIdSearchPreference Search Preferences To cancel  * @Return The preference of search Delete  */  /**  * Method to extract the list references to the Cultural Heritage Visited by a  * tourist  *  * @Param pIdTourist Identifier Tourist  * @Return list of references to the Cultural Heritage Visited  */  /**  * Method for the extraction of the list when making reference to Refreshments  * Visited by a tourist  *  * @Param pIdTourist Identifier Tourist  * @Return list of references to Refreshments Visited  */  /**  * Method for the insertion of a cultural Visited  *  * @Param pVisitBC package containing all information relating to Visit  * @Return true if the item is added successfully, false otherwise  */  /**  * Method for inserting a refreshment Visited  *  * @Param pVisitPR package containing all information relating to Visit  * @Return true if the item is added successfully, false otherwise  */  /**  * Method for the insertion of a cultural object in the list of Favorites  *  * @Param pIdTourist Identifier Tourist  * @Param ID pIdCulturalHeritage of Cultural Heritage  * @Return true if the insertion is successful, false otherwise  */  /**  * Method for inserting a refreshment to my Favorites  *  * @Param pIdTourist Identifier Tourist  * @Param pIdRefreshmentPoint point identification Refreshment  * @Return true if the insertion is successful, false otherwise  */  /**  * Method for the clearing of a cultural object from the list of Favorites  *  * @Param pIdTourist Identifier Tourist  * @Param ID pIdCulturalHeritage of Cultural Heritage  * @Return true if the clearing is successful, false otherwise  * @Throws RemoteException Exception Remote  */  /**  * Method for deleting a refreshment from the list of Favorites  *  * @Param pIdTourist Identifier Tourist  * @Param pIdRefreshmentPoint point identification Refreshment  * @Return true if the clearing is successful, false otherwise  */  /**  * Method to extract the list of Cultural Heritage Favorites  *  * @Param pIdTourist Identifier Tourist  * @Return List of Cultural Heritage Favorites  */  /**  * Method to extract the list of Refreshments  *  * @Param pIdTourist Identifier Tourist  * @Return list of eateries Favorites  */

/**  * Access method attribute maxDist  *  * @Return the maximum distance of all the terms in all categories  */  /**  * Access method to the table of categories  *  * @Return categories  */  /**  * Method of accessing the table of total time  *  * @Return totTermini  */  /**  * Method to access a category in the table of Categories  *  * @Return object categories representing the category name PNameCategoria  */  /**  * Method of accessing the values of a particular term in this  * Category table  *  * @Return Returns the values associated with the term pTerms  */  /**  * Method which allows you to add a category to the table of Categories  *  * @Param pCategoryName category name to add  * @Param object associated pCategory category  * @Return true if the operation was successfully carried out false Otherwise  */  /**  * Edit a category of the category table  *  * @Param pCategoryName category name to edit  * @Param object pCategory be associated with this category  * @Return true if the operation was successfully carried out false Otherwise  */  /**  * Method which allows you to set the value of a term in the tables Total time  *  * @Param name pTerms term  * @Param pVal value to associate with the term  */  /**  * Method which allows the value of the seven kings of the maximum distance of  * Terms from one category  *  * @Param pMaxDist  */  /**  * Method which allows to derive a collection of names of iterable All  * categories in the categories table  *  * @Return String iterable Collection  */  /**  * Method aids to verify the existence of a category In the table of categories  *  * @Param pKey name of the category  * @Return true if the category exists false otherwise  */  /**  * Method aids to verify the existence of a term In the table of total time  *  * @Param pKey term  * @Return true if the term exists false otherwise  */
/**  * Initialize the content pane of the frame inside.  *  * @Return javax.swing.JPanel - the content pane.  */  /**  * This method initializes the toolbar to manage the news.  *  * @Return javax.swing.JToolBar - the toolbar management news.  */  /**  * This method initializes the button to edit a news.  *  * @Return javax.swing.JButton - button to change.  */  /**  * This method initializes the button to delete a news.  *  * @Return javax.swing.JButton - the button for deletion.  */  /**  * This method initializes the panel that realizes the interface side Right of  * news management.  *  * @Return javax.swing.JPanel - the right panel.  */  /**  * This method initializes the form for entering and editing a News.  *  * @Return javax.swing.JPanel - the format  */  /**  * This method initializes the slider to set the priority of a News.  *  * @Return javax.swing.JSlider - the slider with ticks from 1 to 5.  */  /**  * This method initializes the radio button for submission of the form Insert /  * edit.  *  * @Return javax.swing.JButton - the button of submission of the form.  */  /**  * This method initializes the button to clear the form or Cancel editing  * actions on a selected news.  *  * @Return javax.swing.JButton - the button above.  */  /**  * This method initializes the panel's online help.  *  * @Return javax.swing.JPanel  */  /**  * This method initializes the table with all the news these In the system.  *  * @Return javax.swing.JTable  */  /**  * This method initializes the text area that contains the text of a news.  *  * @Return javax.swing.JTextArea - the text area.  */  /**  * This method resets the form fields.  */  /**  * This method imports the news downloaded from the server in the table.  */


/**  * Returns the latitude  *  * @Return  */  /**  * Sets the latitude  *  * @Param pLatitude  */  /**  * Returns the longitude  *  * @Return  */  /**  * Sets the longitude  *  * @Param pLongitude  */  /**  * Returns the altitude  *  * @Return  */  /**  * Sets the altitude  *  * @Param pAltitude  */  /**  * Calculate the distance between the point and another point given as argument  *  * @Param p  * @Return  */  /**  * Method which creates a 3D point from coordinates measured in degrees. The 3D  * point instead represents the coordinates in radians  *  * @Param pLatitude latitude in degrees  * @Param pLongitude Longitude in degrees *  * @Param pAltitude  * @Return Punto3D with the coordinates in radians  */
/**  * Method that returns the custom component for the Display of the data  * contained in the cell of a table.  *  * @Param pTable JTable - the table.  * @Param Object pValue - the data.  * @Param boolean pSelected --  * @Param boolean pHasFocus --  * @Param int pRow - the line number.  * @Param int pColumn - the column number.  * @Return Component - the component that customizes render the cell.  * @Throws IllegalArgumentException - if the value of the cell can not Be  *         rendered by this renderer.  */
/**  * This method returns the display component of the cell identified From the row  * and column provided input.  *  * @Param pTable JTable - the table.  * @Param pValue Object - the object contained in the selected cell.  * @Param pIsSelected boolean - true if the object selected. False otherwise.  * @Param pHasFocus boolean - true if the object has the focus. False otherwise.  * @Param pRow int - the row index.  * @Param pColumn int - the index of the column.  * @Return Component - the component to display  */
/**  * Returns the id of the point of comfort for which information Are stored in  * this node.  *  * @Return int - the id of refreshment.  */  /**  * Stores the id of the refreshment provided input.  *  * @Param int pId - an ID of an eating place.  */  /**  * Return the name of refreshment.  *  * @Return String - the name of refreshment.  */  /**  * Stores the name of the refreshment provided input.  *  * pName * @param String - the name of a refreshment.  *  * @Throws IllegalArgumentException - if the name provided as input is invalid.  */
/**  * This method initializes this  *  * @Return void  */  /**  * This method initializes jContentPane  *  * @Return javax.swing.JPanel  */  /**  * This method initializes RightPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes jJToolBarBar  *  * @Return javax.swing.JToolBar  */  /**  * This method initializes CentrePanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes btnSkeda  *  * @Return javax.swing.JButton  */  /**  * This method initializes btnModify  *  * @Return javax.swing.JButton  */  /**  * This method initializes btnDelete  *  * @Return javax.swing.JButton  */  /**  * This method initializes JScrollPane  *  * @Return javax.swing.JScrollPane  */  /**  * This method initializes HelpPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes jTextPane  *  * @Return javax.swing.JTextPane  */  /**  * This method initializes btnSearch2  *  * @Return javax.swing.JButton  */  /**  * This method initializes btnActive2  *  * @Return javax.swing.JButton  */  /**  * This method initializes SearchPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes namePR  *  * @Return javax.swing.JTextField  */  /**  * This method initializes btnActive  *  * @Return javax.swing.JButton  */  /**  * This method initializes btnHistorical  *  * @Return javax.swing.JButton  */
// Passing as parameter the ID of the same Refreshment  // The new Refreshment with the information contained in the bean  // Refreshments  // A Convention on or off depending on the parameter passed  // Parameter  // Identifier is passed as parameter  // Passed as parameter Refreshments  // Passed as a parameter, the feedback associated with it  // Method to insert a tag from those of a refreshment  // Insert
/*      * Method which allows to obtain a BeanRefreshmentPoint through Connect to      * database      */   // Issued by tourists for Refreshment passed as parameter  // From 0 to 1 vote, 1 vote for 2, etc. ..  // Refreshment
/**  * This method initializes this  *  * @Return void  */  /**  * This method initializes jContentPane  *  * @Return javax.swing.JPanel  */  /**  * This method initializes JToolBar  *  * @Return javax.swing.JToolBar  */  /**  * This method initializes JComboBox  *  * @Return javax.swing.JComboBox  */   /**  * This method initializes centralPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes JScrollPane  *  * @Return javax.swing.JScrollPane  */  /**  * This method initializes tables  *  * @Return javax.swing.JTable  */  /**  * This method initializes southPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes JTabbedPane  *  * @Return javax.swing.JTabbedPane  */  /**  * This method initializes guideline  *  * @Return javax.swing.JPanel  */  /**  * This method initializes jTextPane  *  * @Return javax.swing.JTextPane  */  /**  * This method initializes genStat  *  * @Return javax.swing.JPanel  */  /**  * This method initializes evdStat  *  * @Return javax.swing.JPanel  */  /**  * This method initializes stat  *  * @Return javax.swing.JPanel  */  /**  * This method initializes JPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes JButton  *  * @Return javax.swing.JButton  */  /**  * This method initializes jButton1  *  * @Return javax.swing.JButton  */  /**  * This method initializes jButton2  *  * @Return javax.swing.JButton  */  /**  * This method initializes JPanel1  *  * @Return javax.swing.JPanel  */  /**  * This method initializes btnView  *  * @Return javax.swing.JButton  */



/*      * (Non-Javadoc) Unisa.gps.etour.control.ManagerRicerche.ISearch * @see #      * search (int, java.lang.String, int [], double, int,      * unisa.gps.etour.util.Punto3D, byte)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.control.ManagerRicerche.ISearch #      * getPageResultCulturalHeritage (int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.control.ManagerRicerche.ISearch #      * getPageResultRefreshmentPoint (int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.control.ManagerRicerche.ISearch #      * getSearchResultNumber ()      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.control.ManagerRicerche.ISearch #      * getSearchPageNumber ()      */  /**  * Method for returning the number of findings from research  *  * @Return number of findings from research. On error Returns -1  * @Throws SQLException Exception Connecting to Database  */  /**  * Method for returning the list of results  *  * @Param pNumberPage range of results to return  * @Return Container sites emerged in the research phase as the interval  */  /**  * Method for calculating the number of pages found at Search  *  * @Return many pages in the research phase  */  /**  * Method for calculating the number of elements of nell'intevallo A given page  *  * @Param interval nPage results  * @Return number of elements in a page  */  /**  * Method for checking the validity of a page  *  * @Param pPage page to check  * @Return true if the page is valid  */  /**  * Method for checking the correctness of the identifier Tourist  *  * @Return true if the identifier is valid, false otherwise  */  /**  * Method to reset all the variables related to a search  *  * @Return A constant that indicates the correct zero  */  /**  * Method for the detection and conversion of data tags in struttara List  *  * @Param list of identifiers pTagsId Search Tags  * @Return List Search Tags  * @Throws SQLException  */


/**  * This method initializes this  *  * @Return void  */  /**  * This method initializes jContentPane  *  * @Return javax.swing.JPanel  */  /**  * This method initializes CenterPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes EastPanel  *  * @Return javax.swing.JPanel  */  /**  * This method initializes JScrollPane  *  * @Return javax.swing.JScrollPane  */  /**  * This method initializes JTable  *  * @Return javax.swing.JTable  */  /**  * This method initializes jJToolBarBar  *  * @Return javax.swing.JToolBar  */  /**  * This method initializes btnModify  *  * @Return javax.swing.JButton  */  /**  * This method initializes btnDelete  *  * @Return javax.swing.JButton  */  /**  * This method initializes btnExit  *  * @Return javax.swing.JButton  */  /**  * This method initializes jPanelUp  *  * @Return javax.swing.JPanel  */  /**  * This method initializes jPanelHelp  *  * @Return javax.swing.JPanel  */  /**  * This method initializes jTextPane  *  * @Return javax.swing.JTextPane  */  /**  * This method initializes JTextField  *  * @Return javax.swing.JTextField  */  /**  * This method initializes JTextArea  *  * @Return javax.swing.JTextArea  */  /**  * This method initializes btnOK  *  * @Return javax.swing.JButton  */  /**  * This method initializes btnReset  *  * @Return javax.swing.JButton  */
// As parameter  // Method that allows the insertion of a new tag as a parameter  // Parameter  // As parameter  // Method that controls all the attributes of a BeanTag
// Method that returns all tags
/**  * Returns the number of columns  */  /**  * Returns the number of rows  */  /**  * Returns the column heading i_esima  *  * @Param pCol  */  /**  * Returns the coordinates given by the pair of row, column  *  * @Param pCol  * @Param pRow  */  /**  * Returns the column pCol  *  * @Param pCol  */  /**  * Always returns false because the cells in the table are not editable  *  * @Param pCol  * @Param pRow  *  * @Return false  */  /**  * This method is empty. Can not be included an element within a cell  *  * @Deprecated  */

/**  * This method initializes the internal frame's content pane.  *  * @Return javax.swing.JPanel - the content pane.  */  /**  * This method initializes the toolbar on the management of Tourists.  *  * @Return javax.swing.JToolBar - the toolbar.  */  /**  * This method initializes the button to activate A tourist.  *  * @Return javax.swing.JButton - the button.  */  /**  * This method initializes the button for changing Data of a tourist.  *  * @Return javax.swing.JButton - the button.  */  /**  * This method initializes the button to display the Board a tourist.  *  * @Return javax.swing.JButton - the button.  */  /**  * This method initializes the delete button for a tourist.  *  * @Return javax.swing.JButton - the button.  */  /**  * This method initializes the scroll with the table bread tourists.  *  * @Return javax.swing.JScrollPane - the scroll pane.  */  /**  * This method initializes the form to the search for tourists.  *  * @Return javax.swing.JPanel  */  /**  * This method initializes the panel's online help.  *  * @Return javax.swing.JPanel  */  /**  * This method initializes the side panel of the interface.  *  * @Return javax.swing.JPanel  */  /**  * This method initializes the search button tourists.  *  * @Return javax.swing.JButton  */  /**  * This method initializes the button to reset form Search.  *  * @Return javax.swing.JButton  */  /**  * This method opens a tab for the bean tourists supplied input.  *  * @Param pTourist BeanTourist - the bean tourists  * @Param boolean pModify  *        <ul>  *        <li>true - if you change the data.  *        <li>* False - if you receive the card. </ Ul>  * @Return void  */  /**  * Closes the selected tab.  *  * @Param pCard profiling - the tab to close.  * @Return void  */  /**  * Update the table model of the tourists with the bean supplied Input.  *  * @Param pTourist BeanTourist - the bean of the tourist.  * @Return void  */
// In the database  // Active or not  // Method that allows the activation of a tourist is not yet activated  // Method that allows you to disable a tourist  // Method that erases a tourist from the Database  // Some for the Cultural Tourist  // Some for the Cultural Tourist
/**  * This method initializes the interface card for tourists.  *  * @Return void  */  /**  * This method loads the bean data provided tourist camps Of the form.  *  * @Return void  */  /**  * This method shows or hides the suggestions relating to the form fields.  *  * @Return void  */  /**  * This method makes it or not editable form fields.  *  * @Return void  */  /**  * This method initializes the toolbar for the functionality of the card  * Tourist.  *  * @Return javax.swing.JToolBar  */  /**  * This method initializes the button for editing data.  *  * @Return javax.swing.JToggleButton  */  /**  * This method initializes the button to save the changes Made to the data of  * the tourist.  *  * @Return javax.swing.JButton  */  /**  * This method initializes the button to reset the data of the tourist In the  * form.  *  * @Return javax.swing.JButton  */  /**  * This method initializes the form contentente data of the tourist.  *  * @Return javax.swing.JPanel  */  /**  * This method returns the id of the tourist who is viewing / Edit.  *  * @Return int - the id of the tourist.  */
/*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # clearSearchPreference (int, Int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # clearGenericPreference (int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # insertSearchPreference (int,      * Unisa.gps.etour.bean.BeanSearchPreference)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # insertGenericPreference (unisa.gps.etour.bean.BeanGenericPreference)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # insertTourist (unisa.gps.etour.bean.BeanTourist)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # modifyGenericPreference (unisa.gps.etour.bean.BeanGenericPreference)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # getSearchPreference (int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # getGenericPreference (int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.ManagerTouristCommon #      * modifyTourist (unisa.gps.etour.bean.BeanTourist)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # getCulturalHeritageVisit (int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # getRefreshmentPointVisit (int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # insertCulturalHeritageVisit (unisa.gps.etour.bean.BeanVisitBC)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # insertRefreshmentPointVisit (unisa.gps.etour.bean.BeanVisitPR)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # insertCulturalHeritagePreference (int, Int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # insertRefreshmentPointPreference (int, Int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # clearCulturalHeritagePreference (int, Int)      */  /*      * (Non-Javadoc)      *      * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # clearRefreshmentPointPreference (int, Int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # getCulturalHeritagePreference (int)      */  /*      * (Non-Javadoc)      *       * @See unisa.gps.etour.control.ManagerRegisteredUsers.IManagerTouristClient      * # getRefreshmentPointPreference (int)      */
// Data  // The parameter passed
/**  * Returns the number of columns provided by the model.  *  * @Return int - the number of columns.  */  /**  * Returns the number of rows currently in the model.  *  * @Return int - the number of rows.  */  /**  * Returns the column name from the index provided.  *  * @Return String - the name of the column.  * @Exception IllegalArgumentException - if the column index is not provided In  *            the model.  */  /**  * Returns the object in the model to the row and column provided.  *  * @Param pRow - the line number.  * @Param pColumn - the column number.  * @Return Object - the object contained in the selected cell.  * @Exception IllegalArgumentException - if the index or the row or column not  *            provided Are present in the model.  */  /**  * Returns the class of objects in the column of which is provided in the index.  *  * @Param pColumn - the column number.  * @Return Class - the class of objects of the selected column.  * @Exception IllegalArgumentException - if the index column does not pro In the  *            model.  */  /**  * Returns whether the selected cell editable.  *  * @Return boolean - true if the cell editable False otherwise  * @Param pRow - the line number.  * @Param pColumn - the column number.  * @Exception IllegalArgumentException - if the index or the row or column are  *            not provided In the model.  */  /**  * The method is inherited by the TableModel not setValueAt Necessary because  * not provided for the possibility of amending a Single cell.  *  * @Deprecated  */  /**  * Enables or disables the tourist in the selected row.  *  * @Param int pRow - the selected row.  * @Return int - the id of the tourist on / off.  */  /**  * Determines if a visitor to the selected row is enabled or disabled.  *  * @Param int pRow - the selected row.  * @Return  *         <ul>  *         <li><i> true </ i> - enabled </ li><li> <i> False </ i> - disabled </  *         li> </ ul>  */  /**  * Enter data for a tourist in the model since its Bean.  *  * @Param pTourist BeanTurisa - the bean that contains the data of the tourist.  */  /**  * Update the information of the tourist in the model (if any) With the bean  * supplied input.  *  * @Param pTourist BeanTourist - the bean that contains the data of the tourist.  */  /**  * Returns the id of the visitor whose data are displayed in row Provided input.  *  * @Param pRow - the line number.  * @Return - the id of the tourist.  * @Exception IllegalArgumentException - if the row index does not pro In the  *            model.  */  /**  * Returns the id of the tourist at the line number provided as input and  * removes it from the model.  *  * @Param pRow - the line number.  * @Return - the id of the tourist.  * @Exception IllegalArgumentException - if the row index does not pro In the  *            model.  */