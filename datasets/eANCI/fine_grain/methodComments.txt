/**  * Metodo che permette di controllare la correttezza della login e della  * password di un accesso invocando il relativo metodo della classe db  * @param login Stringa che viene usata come login  * @param password Stringa che viene usata come password  * @return True se l'accesso � presente, False altrimenti  * @throws DbException  */  /**  * Metodo che permette di controllare l'esistenza della login  * invocando il relativo metodo della classe db  * @param login Stringa che viene usata come login  * @return True se la login � presente, False altrimenti  * @throws DbException  */  /**  * Metodo che restituisce un accesso invocando il relativo metodo della classe db  * @param login Stringa che viene usata come login  * @return Restituisce un oggetto di tipo Accesso  * @throws DbException  */   /**  * Metodo che inserisce un accesso all'interno del db  * invocando il relativo metodo della classe db  * @param ac Oggetto di tipo Accesso  * @return True se � stato effettuato un inserimento nel db, False altrimenti  * @throws DbException  */  /**  * Metodo che elimina un accesso  dal db invocando il relativo metodo della classe db  * @param login Stringa che viene usata come login  * @return True se � stato effettuato una cancellazione nel db, False altrimenti  * @throws DbException  */  /**  * Metodo che restituisce tutti gli accessi memorizzati  * invocando il relativo metodo della classe db  * @return Restituisce una Collection di Accessi  * @throws DbException  */
/**  * Metodo che restituisce una login  * @return Login  */  /**  * Metodo che imposta una login  * @param login  */  /**  * Metodo che restituisce una password  * @return Password  */  /**  * Metodo che imposta una password  * @param password  */  /**  * Metodo che restituisce il tipo di utente che accede  * @return Tipo  */  /**  * Metodo che imposta il tipo di utente che accede  * @param tipo  */  /**  * Metodo che converete in una stringa le informazioni di un accesso  * @return String  */
/**  * Metodo che modifica un amministratore  * invocando il relativo metodo della classe db  * @param matricola la stringa che identifica l'amministratore  * @param newAdmin Amministratore con i dati aggiornati  * @return True se � stato effettuato un inserimento nel db, False altrimenti  */  /**  * Metodo che restituisce un amministratore  * invocando il relativo metodo della classe db  * @param matricola stringa che viene utilizzato come matricola dell'amministratore  * @return Restituisce un oggetto di tipo Amministratore  * @throws DbException  */  /**  * Metodo che inserisce un amministratore all'interno del db  * invocando il relativo metodo della classe db  * @param newAdmin Oggetto di tipo Amministratore  * @return True se � stato effettuato un inserimento nel db, False altrimenti  * @throws DbException  */  /**  * Metodo che elimina un Amministratore  dal db  * invocando il relativo metodo della classe db  * @param matricola l'intero che viene utilizzato come matricola  * @return True se � stato effettuato una cancellazione nel db, False altrimenti  * @throws DbException  */  /**  * Metodo che restituisce un amministratore  * invocando il relativo metodo della classe db  * @param login stringa che viene utilizzata come login dell'amministratore  * @return Restituisce un oggetto di tipo amministratore  * @throws DbException  */  /**  * Metodo che restituisce un insieme di amministratori  * invocando il relativo metodo della classe db  * @param nomeAmm stringa che viene utilizzata come nome dell'amministratore  * @param cognAmm stringa che viene utilizzata come cognome dell'amministratore  * @return Restituisce una Collection di Amministratori  * @throws DbException  */  /**  * Metodo che restituisce tutti gli amministratori memorizzati  * @return Restituisce una Collection di Amministratori  * @throws DbException  */
/**  * Metodo che restituisce il nome dell'impiegato  * @return Nome  */  /**  * Metodo che imposta il nome dell'impiegato  * @param nome  */  /**  * Metodo che restituisce il cognome dell'impiegato  * @return Cognome  */  /**  * Metodo che imposta il cognome dell'impiegato  * @param cognome  */  /**  * Metodo che restituisce la matricola dell'impiegato  * @return Matricola  */  /**  * Metodo che imposta  la matricola dell'impiegato  * @param matricola  */  /**  * Metodo che restituisce l'e-mail dell'impiegato  * @return Email  */  /**  * Metodo che imposta l'e-mail dell'impiegato  * @param email  */  /**  * Metodo che restituisce la login dell'impiegato  * @return Login  */  /**  * Metodo che imposta la login dell'impiegato  * @param login  */  /**  * Metodo che converete in una stringa le informazioni di un accesso  * @return String  */

/**  * Metodo che permette la ricerca di una carta d'identita tramite il suo numero  * invocando il relativo metodo della classe db  * @param cod il numero della carta d'identit� del cittadino.  * @return l'oggetto di tipo CartaIdentit� associata al numero passato come parametro  * @throws DbException  */

/**  * Metodo che permette la ricerca di un cittadino tramite la sua login  * invocando il relativo metodo della classe db  * @param login � la login in base alla quale si vuole effettuare la ricerca  * @return l'oggetto di tipo cittadino  * @throws DbException  */  /**  * Metodo che permette la modifica della login per uno specifico cittadino  * invocando il relativo metodo della classe db  * @param idCitt � l'id del cittadino  * @param newLogin � la nuova login del cittadino  * @return true se l'operazione � andata a buon fine, flase altrimenti  */  /**  * Metodo che permette la modifica dell'indirizzo e-mail di uno specifico cittadino  * invocando il relativo metodo della classe db  * @param idCittadino � l'identificativo del cittadino  * @param email � la nuova mail da assegnare al cittadino  * @return true se l'operazione � eseguita con successo, flase altrimenti  * @throws DbException  */  /**  * Metodo che permette di inserire un nuovo cittadino  * invocando il relativo metodo della classe db  * @param cittadino � l'istanza di cittadino  * @return l'id del cittadino inserito.  * @throws DbException  */  /**  * Metodo che permette la ricerca di un insieme di cittadini in base al loro nome e cognome  * invocando il relativo metodo della classe db  * @param nome parametro su cui effettuare la ricerca  * @param cognome parametro su cui effettuare la ricerca  * @return una collection di cittadini con il nome e il cognome passato come parametro  * @throws DbException  */  /**  * Metodo che permette la cancellazione di un cittadino  * invocando il relativo metodo della classe db  * @param idCitt � l'identificativo del cittadino  * @return true se l'operazione � eseguita con successo, flase altrimenti  * @throws DbException  */  /**  * Metodo che permette la ricerca di un cittadino tramite il suo id  * invocando il relativo metodo della classe db  * @param idCitt � l'identificativo del cittadino  * @return oggetto di tipo cittadino con id uguale a quello passato come parametro  * @throws DbException  */  /**  * Metodo che modifica il nucleo familiare del cittadino dato il suo id  * invocando il relativo metodo della classe db  * @param idCitt � l'id del cittadino  * @param newid � l'id del nuovo nucleo familiare del cittadino  * @return true se l'operazione � eseguita con successo, flase altrimenti  * @throws DbException  */  /**  * Metodo che permette la modifica del nome di uno specifico cittadino  * invocando il relativo metodo della classe db  * @param idCitt � l'identificativo del cittadino  * @param nome � il nuovo nome da assegnare al cittadino  * @return true se l'operazione � eseguita con successo, flase altrimenti  * @throws DbException  */  /**  * Metodo che permette la modifica del cognome di uno specifico cittadino  * invocando il relativo metodo della classe db  * @param idCitt � l'identificativo del cittadino  * @param cognome � il nuovo cognome da assegnare al cittadino  * @return true se l'operazione � eseguita con successo, flase altrimenti  * @throws DbException  */




/**  * Metodo che permette la cancellazione della carta d'identit� del cittadino nel  * momento in cui esso cambia residenza verso un comune esterno (aggiornamento del db)  * @param cod � il numero della carta d'identità di chi ha chiesto il cambio di residenza verso un comune esterno  * @return true se l'operazione � eseguita con successo  * @throws DbException  */
/**  * Metodo che permette la ricerca di una carta d'identit� tramite il suo numero.  * @param cod � il numero della carta d'identit� del cittadino.  * @return l'oggetto di tipo CartaIdentit� associata al numero passato come parametro  * @throws DbException  */  /**  * Metodo che permette la cancellazione di una carta d'identit�. (aggiornamento del db)  * @param cod � il codice della carta d'identit� che si intende cancellare  * @return true se l'operazione � andata a buon fine  * @throws DbException  */  /**  * Metodo che permette la registrazione di una nuova carta d'identit� all'interno del database  * @param c � l'oggetto di tipo carta d'identit�  * @return true se l'operazione � andata a buon fine  * @throws DbException  */  /**  * Metodo che permette la modifica della via in una specifica carta d'identit�. (aggiornamento del db)  * @param cod � il numero della carta d'identit�  * @param v � la nuova via da registrare nella carta d'identit�  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la modifica del numero civico in una specifica carta d'identit�. (aggiornamento del db)  * @param cod � il numero della carta d'identit�  * @param nc � il nuovo numero civico  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la modifica della residenza (via e numero civio) in una specifica carta d'identit�. (aggiornamento del db)�  * @param via � la nuova via da registrare nella carta d'identit�  * @param nc � il numero civico da registrare nella carta d'identit�  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la modifica della data di rilascio di una specifica carta d'identit�. (aggiornamento del db)  * @param cod � il numero della carta d'identit�  * @param d � la nuova data di rilascio della carta d'identit�  * @return true se l'operazione � eseguita con successo  * @throws DbException  */   /**  * Metodo che permette la modifica della validit�per l'espatrio di una specifica carta d'identit�. (aggiornamento del db)  * @param cod � il numero della carta d'identit�  * @param esp � il valore booleano che indica la validit� per l'espatrio per la specifica carta d'identit�  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la ricerca di una carta d'identit� a partire dall'id del proprietario  * @param idC � l'id del cittadino  * @return l'oggetto di tipo CartaIdentita dello specifico cittadino.  * @throws DbException  */
/**  * Metodo che permette di registrare un nuovo cittadino. (aggiornamento del db)  * @param citt � l'istanza di cittadino  * @return l'id del cittadino inserito.  * @throws DbException  */  /**  * Metodo che permette la modifica del nome di uno specifico cittadino. (aggiornamento del db)  * @param idCitt � l'identificativo del cittadino  * @param newname il nuovo nome da assegnare al cittadino  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la modifica del cognome di uno specifico cittadino. (aggiornamento del db)  * @param idCitt � l'identificativo del cittadino  * @param newsurname � il nuovo cognome da assegnare al cittadino  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la modifica del codice fiscale di uno specifico cittadino. (aggiornamento del db)  * @param idCitt � l'identificativo del cittadino  * @param newcf � il nuovo codice fiscale da assegnare al cittadino  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la modifica dell'indirizzo e-mail di uno specifico cittadino. (aggiornamento del db)  * @param idCitt � l'identificativo del cittadino  * @param newmail � la nuova mail da assegnare al cittadino  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la modifica del campo advertise di uno specifico cittadino. (aggiornamento del db)  * @param idCitt � l'identificativo del cittadino  * @return true se l'operazione � eseguita con successo  * @throws DbException  */  /**  * Metodo che permette la cancellazione di un cittadino. (aggiornamento del db)  * @param idCitt � l'identificativo del cittadino  * @return true se l'operazione � eseguita con successo  * @throws DbException  */   /**  * Metodo che permette la ricerca di un insieme di cittadini in base al loro nome e cognome.  * @param name parametro su cui effettuare la ricerca  * @param surname parametro su cui effettuare la ricerca  * @return una collection di cittadini con il nome e il cognome passato come parametro  * @throws DbException  */  /**  * Metodo che permette la modifica della login per uno specifico cittadino. (aggiornamento del db)  * @param idC � l'id del cittadino  * @param newLogin � la nuova login del cittadino  * @return true se l'operazione � andata a buon fine  */  /**  * Metodo che permette la ricerca di un cittadino tramite la sua login.  * @param log � la login in base alla quale si vuole effettuare la ricerca  * @return l'oggetto di tipo cittadino  * @throws DbException  */  /**  * Metodo privato che ritorna l'id dell'ultimo cittadino inserito.  * @return l'id pi� alto della tabella cittadino  * @throws DbException  */  /**  * Metodo che permette di conoscere l'id del cittadino a partire dai suoi dati anagrafici (codice fiscale,cognome,nome)  * @param cf � il codice fiscale parametro per la ricerca  * @param surname � il cognome parametro per la ricerca  * @param name � il nome parametro per la ricerca  * @return l'id del cittadino se ok, -1 se la ricerca non ha successo  */  /**  * Metodo che permette la ricerca del codice fiscale del cittadino a partire dal suo ID  * @param id � l'id del cittadino  * @return il codice fiscale del cittadino  */  /**  * Metodo che modifica il nucleo familiare del cittadino dato il suo id  * @param idCitt � l'id del cittadino  * @param newnucleo � il nuovo nucleo familiare del cittadino  * @return true se l'operazione � eseguita con successo  * @throws DbException  */






/**  * Metodo che restituisce il nome dell'impiegato  * @return Nome  */  /**  * Metodo che imposta il nome dell'impiegato  * @param nome  */  /**  * Metodo che restituisce il cognome dell'impiegato  * @return Cognome  */  /**  * Metodo che imposta il cognome dell'impiegato  * @param cognome  */  /**  * Metodo che restituisce la matricola dell'impiegato  * @return Matricola  */  /**  * Metodo che imposta  la matricola dell'impiegato  * @param matricola  */  /**  * Metodo che restituisce l'e-mail dell'impiegato  * @return Email  */  /**  * Metodo che imposta l'e-mail dell'impiegato  * @param email  */  /**  * Metodo che restituisce la login dell'impiegato  * @return Login  */  /**  * Metodo che imposta la login dell'impiegato  * @param login  */  /**  * Metodo che converete in una stringa le informazioni di un accesso  * @return String  */
/**  * Metodo che modifica un impiegato  * invocando il relativo metodo della classe db  * @param matricola la stringa che identifica l'impiegato  * @param newImpiegato impiegato con i dati aggiornati  * @return True se � stato effettuato un inserimento nel db, False altrimenti  */  /**  * Metodo che restituisce un impiegato  * invocando il relativo metodo della classe db  * @param matricola stringa che viene utilizzato come matricola dell'impiegato  * @return Restituisce un oggetto di tipo Impiegato  * @throws DbException  */  /**  * Metodo che inserisce un impiegato all'interno del db  * invocando il relativo metodo della classe db  * @param newImpiegato Oggetto di tipo Impiegato  * @return True se � stato effettuato un inserimento nel db, False altrimenti  * @throws DbException  */  /**  * Metodo che elimina un impiegato  dal db  * invocando il relativo metodo della classe db  * @param matricola la stringa che viene utilizzato come matricola  * @return True se � stato effettuato una cancellazione nel db, False altrimenti  * @throws DbException  */  /**  * Metodo che restituisce un impiegato  * invocando il relativo metodo della classe db  * @param login stringa che viene utilizzata come login dell'impiegato  * @return Restituisce un oggetto di tipo impiegato  * @throws DbException  */  /**  * Metodo che restituisce un insieme di impiegati  * invocando il relativo metodo della classe db  * @param nomeImp stringa che viene utilizzata come nome dell'impiegato  * @param cognImp stringa che viene utilizzata come cognome dell'impiegato  * @return Restituisce una Collection di Impiegati  * @throws DbException  */  /**  * Metodo che restituisce tutti gli impiegati memorizzati  * invocando il relativo metodo della classe db  * @return Restituisce una Collection di impiegati  * @throws DbException  */
/**  * Restituisce l'id dello stato di famiglia  * @return	una stringa che contiene l'id dello stato di famiglia  */  /**  * Setta l'id dello stato di famiglia  * @return	una stringa che contiene il nuovo id dello stato di famiglia  */  /**  * Restituisce l'id del capofamiglia  * @return	una stringa che contiene l'id del capofamiglia  */  /**  * Setta l'id del capofamiglia  * @return	una stringa che contiene il nuovo id del capofamiglia  */  /**  * Restituisce le note rilasciate  * @return	una stringa che contiene una nota rilasciata in precedenza  */  /**  * Inserisce una nota  * @return	una stringa che contiene la nota rilasciata  */  /**  * Restituisce il numero di componenti della famiglia  * @return	un intero che contiene il numero di componenti del nucleo familiare  */  /**  * Setta il numero di componenti del nucleo familiare  * @return	un intero che contiene il nuovo numero di componenti del nucleo familiare  */
/**  * Metodo che inserisci un oggetto nucleoFamiliare nel db  * invocando il relativo metodo della classe db  * @param nf Oggetto di tipo nucleofamiliare  * @return Restituisce l'id del nucleo familiare inserito  * @throws DbException  */  /**  * Metodo che permette di controllare l�esistenza di un nucleo familiare  * invocando il relativo metodo della classe db  * @param id l'intero che viene utilizzato come id del nucleo familiare  * @return True se l'id � presente, False altrimenti  * @throws DbException  */  /**  * Metodo che restituisce il numero di componenti del nucleo familiare  * invocando il relativo metodo della classe db  * @param id del nucleo familiare di cui si vuole il numero di componenti  * @return True se l'id � presente, False altrimenti  * @throws DbException  */  /**  * Metodo che modifica un capo famiglia  * invocando il relativo metodo della classe db  * @param id l'intero che viene utilizzato come id della famiglia  * @param IdCitt l'intero che viene utilizzato come id del capo famiglia  * @return True se la modifica ha avuto successo, altrimenti False  * @throws DbException  */  /**  * Metodo che incrementa il numero di componenti del nucleo familiare  * invocando un metodo della classe db  * @param id del nucleo familiare che si vuole modificare  * @return True se la modifica ha avuto successo, altrimenti False  * @throws DbException  */  /**  * Metodo che decrementa il numero di componenti del nucleo familiare  * invocando un metodo della classe db  * @param id del nucleo familiare che si vuole modificare  * @return True se la modifica ha avuto successo, altrimenti False  * @throws DbException  */
/**  * Preleva l'id della richiesta  * @return	una stringa con l'id della richiesta  */  /**  * Setta un nuovo id alla richiesta  * @param str	prende in input una stringa che contiene il nuovo id della richiesta  * @return		una stringa che contiene il nuovo id  */  /**  * Preleva il tipo di richiesta effettuata  * @return	una stringa che contiene il tipo di richiesta  */  /**  * Setta il tipo della richiesta  * @param str	prende in input una stringa che contiene il tipo della richiesta  * @return		una stringa che contiene il nuovo tipo  */  /**  * Preleva la data in cui � stata fatta la richiesta  * @return una stringa che contiene la data della richiesta  */  /**  * Setta la data alla richiesta  * @param str	prende in input una stringa che contiene la data della richiesta  * @return		una stringa che contiene la nuova data  */  /**  * Preleva l'id del richiedente che ha effettuato la richiesta  * @return	una stringa con l'id della richiesta  */  /**  * Setta il richiedente della richiesta  * @param str	prende in input una stringa che contiene il richiedente della richiesta  * @return		una stringa che contiene il richiedente  */  /**  * Preleva lo stato della richiesta  * @return	una stringa con l'id della richiesta  */  /**  * Setta lo stato della richiesta  * @param str	prende in input una stringa che contiene la data della richiesta  * @return		una stringa che contiene la nuova data  */  /**  * Preleva il link al documento richiesto  * @return	una stringa con l'id della richiesta  */  /**  * Setta il link al documento  * @param str	prende in input una stringa che contiene il link al documento richiesto  * @return		una stringa che contiene il nuovo documento  */  /**  * Restituisce un valore booleano nel caso in cui la richiesta sia stata accettata  * @return		true se la richiesta � stata accettata  */  /**  * Restituisce un valore booleano nel caso in cui la richiesta sia stata rifiutata  * @return		false se la richiesta � stata rifiutata  */

















// nascoste








/**  * servlet di risposta lato server destinata al client  */


