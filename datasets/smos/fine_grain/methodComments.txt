/**  * Method that returns the id of absence  * @return an integer representing the id of the absence  */  /**  * Method setting the id of absence  * @param an integer representing the id to be set  */  /**  * Method that returns the student id relative to the absence  * @return an integer representing the id of the absent student  */  /**  * Method setting student id relative to absence  * @param an integer representing the id to be set  */  /**  * Method that returns the date of absence  * @return a string representing the date of absence  */  /**  * Method setting the date of absence  * @param a string with the date to set  */  /**  * Method that returns the id of the justification relative to the absence  * @return an integer representing the id of the justification relative to the absence, or null if the absence was not justified  */  /**  * Method setting the id of the justification relative to the absence  * @param an integer representing the id of the justify to be set  */  /**  * Method that returns the academic year relative to absence  * @return an integer representing the year in which the academic year began  */  /**  * Method setting the academic year relative to absence  * @param an integer representing the academic year to be set  */

/**  * Set the address id.  * @param pIdAddress  * 			the id to set.  */  /**  * @return the address name.  */  /**  * Set address name.  * @param pName  * 			Name to set.  */
/**  * Method returning the academic year  * @return A whole representing the school year of the first semester of the class.  */  /**  * Method that sets the academic year  * @param The new academic year to be set  */  /**  * Method to get the class address ID  * @return an integer representing the class address ID  */  /**  * Method setting class address ID  * @param The new ID to set  */  /**  * Method that returns the class ID  * @return an integer representing the class ID  */  /**  * Method setting class ID  * @param The new ID to set  */  /**  * Method that returns the class name  * @return a string representing the class name  */  /**  * Method setting class name  * @param The new name to set  */

/**  * Returns the size of the list of active connections.  *  * @return the size of the list of currently active connections.  */  /**  * Empty the pool of connections from active ones that have no longer run  * operations for inactiveMaxTimeout milliseconds.  */  /**  * Closes all connections in the pool both active and  * They're pools.  *  * @author Di Giorgio Domenico, Cris Malinconico  * @throws SQLException  */  /**  * Closes all connections indicated in the connection list.  *  * @author Di Giorgio Domenico, Cris Malinconico  * @param pConnections  *            the list of connections to be closed.  * @throws SQLException  *             when it is impossible to close a connection.  */  /**  * Closes all pool connections that are in the pool list.  *  * @throws SQLException  *             when it is impossible to close a connection.  */  /**  * Method used by getConnection() to create a new connection  * if they are not in the pool list.  *  * @return a new connection to the DataBase.  */  /**  * Returns a connection if the pool is not full, the check is done  * first in the list of pool connections to avoid creations  * useless otherwise a new connection will be created.  *  * @return the connection to the database if possible otherwise  *         an exception is generated  * @see javax.sql.DataSource getConnection()  * @throws SQLException  *             If a problem occurs while connecting to the database  *                      including the fact that the maximum limit of connections  *                      active is reached.  */      /**  * Method used by getConnection() to determine whether in the list of  * pool connections there are some that you can reuse.  *  * @param pPoolIndex  *            index of the pool connection list (always 0).  * @return a connection from the list of those pools if any  *         one.  */  /**  * Returns the size of the pool connection list  *  * @return the size of the pool connection list.  */  /**  * Release a connection, deleting it from active ones and inserting it into  * those pools to be reused later.  *  * @param pConnection  *            The connection that must be returned to the pool.  */    /**  * Method not implemented  * @param pArg0  * @throws SQLException  *  * @throws NotImplementedYetException  */  /**  * Method not implemented  * @param pArg0  * @throws SQLException  *  * @throws NotImplementedYetException  */   /**  * Each time a connection generates an event with an invocation of  * getConnection() or release() timestamp is set to value  * current time using this method.  */  /**  * Check every connectionPoolCloseTimeout milliseconds if the  * pool connections can be closed, thus freeing up memory.  */
/**  * @see java.sql.Connection#clearWarnings()  */  /**  * @see java.sql.Connection#close()  */   /**  * Close the wrapped connection.  * @throws SQLException  */  /**  * @see java.sql.Connection#commit()  */  /**  * @see java.sql.Connection#createStatement()  */  /**  * @see java.sql.Connection#createStatement(int, int)  */  /**  * @see java.sql.Connection#createStatement(int, int, int)  */  /**  * Closes the wrapped connection.  */  /**  * @see java.sql.Connection#getAutoCommit()  */  /**  * @see java.sql.Connection#getCatalog()  */  /**  * @see java.sql.Connection#getHoldability()  */  /**  * @see java.sql.Connection#getMetaData()  */  /**  * @see java.sql.Connection#getTransactionIsolation()  */  /**  * @see java.sql.Connection#getTypeMap()  */  /**  * @see java.sql.Connection#getWarnings()  */  /**  * @see java.sql.Connection#isClosed()  */  /**  * @see java.sql.Connection#isReadOnly()  */  /**  * @see java.sql.Connection#nativeSQL(java.lang.String)  */  /**  * @see java.sql.Connection#prepareCall(java.lang.String)  */  /**  * @see java.sql.Connection#prepareCall(java.lang.String, int, int)  */  /**  * @see java.sql.Connection#prepareCall(java.lang.String, int, int, int)  */  /**  * @see java.sql.Connection#prepareStatement(java.lang.String)  */  /**  * @see java.sql.Connection#prepareStatement(java.lang.String, int)  */  /**  * @see java.sql.Connection#prepareStatement(java.lang.String, int, int)  */  /**  * @see java.sql.Connection#prepareStatement(java.lang.String, int, int, int)  */  /**  * @see java.sql.Connection#prepareStatement(java.lang.String, int[])  */  /**  * @see java.sql.Connection#prepareStatement(java.lang.String, java.lang.String[])  */  /**  * @see java.sql.Connection#releaseSavepoint(java.sql.Savepoint)  */  /**  * @see java.sql.Connection#rollback()  */  /**  * @see java.sql.Connection#rollback(java.sql.Savepoint)  */  /**  * @see java.sql.Connection#setAutoCommit(boolean)  */  /**  * @see java.sql.Connection#setCatalog(java.lang.String)  */  /**  * @see java.sql.Connection#setHoldability(int)  */  /**  * @see java.sql.Connection#setReadOnly(boolean)  */  /**  * @see java.sql.Connection#setSavepoint()  */  /**  * @see java.sql.Connection#setSavepoint(java.lang.String)  */  /**  * @see java.sql.Connection#setTransactionIsolation(int)  */  /**  * @see java.lang.Object#toString()  */

/**  * Actual creation of the connection pool.  */

/**  * Method that returns the Delay id  * @return an integer representing the delay id  */  /**  * Method setting the Delay id  * @integer param representing the id to be set  */  /**  * Method that returns the id of the late student  * @return an integer representing the student id  */  /**  * Method setting the student id relative to the delay  * @param an integer representing the id to be set  */  /**  * Method that returns the date of delay  * @return a string representing the date of the delay  */  /**  * Method setting the date of delay  * @param a string representing the date of delay  */  /**  * Method that returns the student's time of entry  * @return a string representing the time of entry of the late student  */  /**  * Method setting the time of entry of the student  * @param a string representing the input time to set  */  /**  * Method that returns the academic year relative to absence  * @return an integer representing the year in which the academic year began  */  /**  * Method setting the academic year relative to absence  * @param an integer representing the academic year to be set  */




/**  * @return getPoolPropertiesPath()  */  /**  * @param poolPropertiesPath  */
/**  * Method that returns the id of the justify  * @return an integer representing the id of the justify  */  /**  * Method setting the id of the justify  * @param an integer representing the id to be set  */  /**  * Method returns the student id relative to justify  * @return an integer representing the student id  */  /**  * Method setting student id relative to justify  * @param an integer representing the id to be set  */  /**  * Method returning the date on which absence was justified  * @return a string representing the justified date  */  /**  * Method setting the date on which absence was justified  * @param a string representing the date to set  */  /**  * Method that returns the academic year relative to the justifies  * @return an integer representing the year in which the academic year began  */  /**  * Method setting the academic year relating to the justification  * @param an integer representing the academic year to be set  */


/**  * Returns the only instance of the existing class.  *  * @return Returns the instance of the class.  */     /**  * Delete an address from the address table.  *  * @param pAddress  * 			The address to delete.  *  * @throws MandatoryFieldException  * @throws EntityNotFoundException  * @throws SQLException  * @throws ConnectionException  * @throws InvalidValueException  */    /**  * Returns the id of the address passed as a parameter.  *  * @param pAddress  *            The address whose id is requested.  * @return the id of the address passed as a parameter.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  */  /**  * Returns the address corresponding to the id passed as a parameter.  *  * @param pIdAddress  * 			The address id.  * @return the address associated with the past id as a parameter.  *  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws InvalidValueException  */  /**  * Returns the set of all addresses in the database.  *  * @return a collection of addresses.  *  * @throws ConnectionException  * @throws EntityNotFoundException  * @throws SQLException  * @throws InvalidValueException  */  /**  * Return the name of the address corresponding to the id  * passed as parameter.  *  * @param pIdAddress  * 			The address id.  * @return Returns a string containing the address name.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  */   /* 	 * Lets you read a record from the ResultSet. 	 */  /* 	 * Allows you to read records from the ResultSet. 	 */
/**  * Returns the only instance of the existing class.  *  * @return the class instance.  */  /**  * Check if the input given class is in the database  * @param The class whose existence must be verified  * @return true if the class is in the database, otherwise false  * @throws MandatoryFieldException  * @throws ConnectionException  * @throws SQLException  */  /**  * Inserts the class object in the database  * @param the class to enter in the database  * @throws MandatoryFieldException  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws InvalidValueException  */  /**  * Update the statistics of a class  * @param Class with updated statistics (but identical ID)  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws MandatoryFieldException  */  /**  * Delete a class from database  * @param Class to delete  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws MandatoryFieldException  * @throws InvalidValueException  */   /**  * Returns the class that has the past ID  * @param The ID of the searched class  * @return a string representing the class with the supplied ID  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  */  /**  * Returns a collection of classes from the same academic year  */      /**  * Consistent reading an integer from recod resultSet  *  * @param pRs  * 		resultSet  * @return  * 	collection<Integer>  * @throws SQLException  * @throws InvalidValueException  */  /**  * Allows you to read only one record from the Result Set  * @param The result set from which to extract the Classroom object  * @throws SQLException  * @throws InvalidValueException  */

/**  * The only instance of existing teaching returns.  *  * @return Returns the instance of the class.  */  /**  * Verify the existence of a teaching in the database.  *  * @param pTeaching  *            The teaching to control.  * @return Returns true if there is past teaching as a parameter,  *         otherwise false.  *  * @throws MandatoryFieldException  * @throws SQLException  * @throws ConnectionException  */  /**  * Inserts a new teaching in the teaching table.  *  * @param pTeaching  *            The teaching to be included.  *  * @throws SQLException  * @throws ConnectionException  * @throws MandatoryFieldException  * @throws EntityNotFoundException  * @throws InvalidValueException  */  /**  * Update a teaching in the teaching table.  *  * @param pTeaching  *            Teaching to be modified  *  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws MandatoryFieldException  */  /**  * Delete a teaching from the teaching table.  *  * @param pTeaching  *            The teaching to be eliminated.  *  * @throws MandatoryFieldException  * @throws EntityNotFoundException  * @throws SQLException  * @throws ConnectionException  * @throws InvalidValueException  */  /**  * Returns the id of the past teaching as a parameter.  *  * @param pTeaching  *            The teaching of which the id is required.  * @return Returns the id of the past teaching as a parameter.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  */  /**  * Returns the name of the teaching corresponding to the past id as  * parameter.  *  * @param pId  *            The teaching id.  * @return Returns a string containing the name of the teaching.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  */  /**  * Returns the instruction corresponding to the past id as a parameter.  *  * @param pId  *           The teaching id.  * @returnReturns the teaching associated with the past id as a parameter.  *  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws InvalidValueException  */  /**  * Return the set of all the teachings in the database.  *  * @return A collection of teachings returns.  *  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  * @throws EntityNotFoundException  */  /**  * Return the set of lessons associated with the corresponding user  * to the past id as a parameter.  *  * @param pId  *            User ID.  * @return A collection of teachings returns.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  */  /**  * Return to the set of teachings that the teacher teaches in the class  *  * @param pIdTeacher  *            User ID.  * @param pIdClass  *            class id  * @return A collection of teachings returns.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  */  /**  * Check if a teaching has an assigned professor.  *  * @param pTeaching  *            The teaching to control.  * @return Returns true if teaching has a teacher assigned, false  *         otherwise.  *  * @throws SQLException  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws InvalidValueException  */  /**  * Return the set of teachings associated with the specified class  *  * @param pId  *            Class ID.  * @return A collection of teachings returns.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  */  /**  * Return the set of teachings associated with the specified class  *  * @param name  *            Class name.  * @return A collection of teachings returns.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  */   /**  * Lets you read a record from the ResultSet.  *  * @param pRs  *            The result of the query.  * @return Return the teaching read.  *  * @throws SQLException  * @throws InvalidValueException  */  /**  * Allows you to read records from the ResultSet.  *  * @param pRs  *            The result of the query.  * @return The collection of teachings read returns.  *  * @throws SQLException  * @throws InvalidValueException  */

/**  * The only instance of the existing vote returns.  *  * @return Return the class instance.  */  /**  * Check for voting in the database.  *  * @param pVotes  *            the vote to be checked.  * @return Returns true if the passed grade exists as a parameter,  *         otherwise false.  *  * @throws MandatoryFieldException  * @throws SQLException  * @throws ConnectionException  */  /**  * Inserts a new vote in the Votes table.  *  * @param pVotes  *            the vote to be inserted.  *  * @throws SQLException  * @throws ConnectionException  * @throws MandatoryFieldException  * @throws EntityNotFoundException  * @throws InvalidValueException  */  /**  * Update a vote in the votes table.  *  * @param pVotes  *            A vote to be changed  *  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws MandatoryFieldException  */  /**  * Check if a student passed as a parameter has a grade assigned in the past teaching  * as a parameter in the past year as a parameter and in the past quarter as a parameter  *  * @param pTeaching  * The teaching to be controlled.  * @param pUserListItem  * The student to check  *  * @return Return the id of the vote -1 otherwise  *  * @throws SQLException  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws InvalidValueException  */  /**  * Delete a vote from the votes table.  *  * @param pVotes  * The vote to be eliminated.  *  * @throws MandatoryFieldException  * @throws EntityNotFoundException  * @throws SQLException  * @throws ConnectionException  * @throws InvalidValueException  */  /**  * Returns the instruction corresponding to the past id as a parameter.  *  * @param pId  * The teaching id.  * @return Returns the teaching associated with the past id as a parameter.  *  * @throws ConnectionException  * @throws SQLException  * @throws EntityNotFoundException  * @throws InvalidValueException  */   /**  * Returns the set of all votes in the database.  *  * @return Returns a collection of votes.  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  * @throws EntityNotFoundException  */  /**  * Returns the set of votes associated with the corresponding user  * to the id passed as a parameter.  *  * @param pId  * The user id.  * @return Returns a collection of votes.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  */  /**  * Returns the set of votes associated with the corresponding user  * to the id passed as a parameter.  *  * @param pId  * The user id.  * @return Returns a collection of votes.  *  * @throws EntityNotFoundException  * @throws ConnectionException  * @throws SQLException  * @throws InvalidValueException  */   /**  * Lets you read a record from the ResultSet.  *  * @param pRs  * The result of the query.  * @return Return the read vote.  *  * @throws SQLException  * @throws InvalidValueException  */  /**  * Allows you to read records from the ResultSet.  *  * @param pRs  * The result of the query.  * @return Returns the collection of read teachings.  *  * @throws SQLException  * @throws InvalidValueException  */

/**  * Method that returns the note id  * @return an integer representing the note id  */  /**  * Method to set the note id  * @param an integer representing the new id value  */  /**  * Method that returns the id of the student who received the note  * @return the id of the user who received the note  */  /**  * Method to set the id of the student who received the note  * @param an integer representing the new id value  */  /**  * Method that returns a string representing the date the note was given  * @return a string representing the date of the note  */  /**  * Method that sets a string representing the date the note was given  * @param the string representing the new date  */  /**  * Method that returns note text  * @return a string representing the note text  */  /**  * Method setting the description of the note  * @param a string containing the description of the note  */  /**  * Method that returns the id of the teacher who gave the note  * @return an integer representing the teacher id  */  /**  * Method setting the id of the teacher who gave the note  * @param teacher the teacher to set  */  /**  * Method that returns the current academic year  * @return an integer indicating the year the lessons start  */  /**  * Medoto setting the current academic year during the assignment of the note  * @param an integer indicating the start year of the lessons to be entered  */


/**  * Method that returns the student of this log line  * @return a User object representing the student  */  /**  * Method that sets the student to this log line  * @param a User object representing the student to enter  */  /**  * Method that returns the student's absence from this log line  * 	 @return an Absence object representing absence, or null if the student was present  */  /**  * Method that sets the student's absence from this log line  * @param an object of type Absence to set  */  /**  * Method that returns the student's delay in this log line  * @return a Delay object representing the delay, or null if the student arrived on time or was absent  */  /**  * Method setting the student's delay in this log line  * @param a Delay object to set  */
/**  * Method that returns the vote from the index in the input array  * @param pInd rating in array  * @return the rating of the given index  * @throws InvalidValueException  */  /**  * Method that adds a vote to the array.  * @param pVotes the vote to add  * @throws InvalidValueException  */  /**  * Method to delete a vote from the array  * @param pId is the index of the vote to be deleted from the array.  * @throws InvalidValueException  */

/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  *  @param pRequest  *  @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  *  @param pRequest  *  @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */


/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */

/**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */

/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */

/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */

/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definizione del metodo doGet  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * Definition of the doGet method  *  * @param pRequest  * @param pResponse  */  /**  * Definition of the doPost method  *  * @param pRequest  * @param pResponse  */
/**  * The name of the course returns  *  * @return The name of the course returns.  */  /**  * Set the name of the course.  *  * @param pName  *            Il nome da settare.  *  * @throws InvalidValueException  */  /**  * Return the teaching id.  *  * @return l'id dell'insegnamento.  */  /**  * Set the teaching id.  *  * @param pId  *            The id to be set..  */
// Wrong database, unable to insert null in the id_justify field of absence
/**  * @return Returns the user's login.  */  /**  * Set the user login.  * param pLogin  * 			The login to be set.  *  * @throws InvalidValueException  */  /**  * @return Returns the user's name.  */  /**  * @return Returns the user's name.  */  /**  * Set the user's name.  * @param pFirstName  * 			The name to set.  */  /**  * @return Returns the user's password.  */  /**  * Set the user's password.  * @param pPassword  * 			The password to be set.  *  * @throws InvalidValueException  */  /**  * @return Returns the user's surname.  */  /**  * Set the user's last name.  * @param pLastName  * 			The surname to be set.  */  /**  * return Returns the user's id.  */  /**  * Set the user id.  * @param pId  * 			The id to be set.  */  /**  * Returns a string containing the user's first and last name.  * @see java.lang.Object#toString()  */  /**  * @return the eMail  */  /**  * @param pMail the eMail to set  */  /**  * @return the cell  */  /**  * @param cell the cell to set  */  /**  * @return the idParent  */  /**  * @param idParent the idParent to set  */
/**  * @return Returns the user's id.  */  /**  * Set the user id.  * @param pId  * 			The id to be set.  */  /**  * @return Returns the user's name.  */  /**  * Set the user's name.  * @param pName  * 			The name to set.  */  /**  * @return the eMail  */  /**  * @param mail the eMail to set  */
/**  * @param args  * @throws InvalidValueException  * @throws ConnectionException  * @throws EntityNotFoundException  * @throws SQLException  * @throws MandatoryFieldException  */

/**  * Method that returns the id of the vote.  * @return the id of the vote  */  /**  * Method that sets the id of the vote  * @param pId_votes  *             the id to set  */  /**  * Method that returns the id of the user connected to the vote  * @return the user's id  */  /**  * Method that sets the user's id related to the vote  * @param pId_user  *               the id to set  */  /**  * method that returns the code of teaching the vote  * @return the teaching method  */  /**  * Method that sets the teaching code relating to the grade  * @param pTeaching  *              the teaching code  */  /**  * Method that returns the grade of the writing  * @return the vote in the writing  */  /**  * Method that sets the grade of the writing, checking that it is between 0 and 10  * @param pWritten  */  /**  *  method that returns the grade of the oral  * @return the oral vote  */  /**  * Method that sets the grade of the oral, checking that it is between 0 and 10  * @param pOral  *            the oral vote to be set  */  /**  * Method that returns the laboratory grade  * @return the lab grade  */  /**  * method that sets the laboratory grade, checking that it is between 0 and 10  * @param pLaboratory  *                 the vote of the laboratory to be set  */  /**  * Method that returns the academic year of the grade  * @return the academic year  */  /**  * method that sets the academic year of the grade  * @param pAccademicYear  */  /**  * Method that returns the quarter of the vote  * @return the semester of the vote (0 or 1)  */  /**  * Method that sets the quarter of the vote  * @param pTurn  *            the semester of the vote to be set  */